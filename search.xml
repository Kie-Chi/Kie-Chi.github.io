<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>the information is here</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.gender = gender</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;name:<span class="subst">&#123;name&#125;</span>,gender:<span class="subst">&#123;gender&#125;</span>,age:<span class="subst">&#123;age&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> deap <span class="keyword">import</span> base,tools,algorithms,creator</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># import random</span></span><br><span class="line"></span><br><span class="line">IND_NUM = <span class="number">30</span> <span class="comment"># 30位编码，[-5,5]，精度是8位</span></span><br><span class="line">POP_NUM = <span class="number">100</span> <span class="comment"># 种群总个体数量</span></span><br><span class="line">OFS_MAX = <span class="number">50</span> <span class="comment"># 后代最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">individual</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> individual]),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> (-<span class="number">5</span> + (<span class="number">10</span> * num)/(<span class="number">2</span>**<span class="number">30</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval</span>(<span class="params">individual</span>):</span><br><span class="line">    x = decode(individual)</span><br><span class="line">    <span class="keyword">return</span> ((np.square(x) + x) * np.cos(<span class="number">2</span> * x) + np.square(x) + x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">creator.create(<span class="string">&quot;FitnessMin&quot;</span>,base.Fitness,weights=(-<span class="number">1.0</span>,))</span><br><span class="line">creator.create(<span class="string">&quot;Individual&quot;</span>,<span class="built_in">list</span>,fitness = creator.FitnessMin)</span><br><span class="line"></span><br><span class="line">toolbox = base.Toolbox()</span><br><span class="line">toolbox.register(<span class="string">&quot;attribute&quot;</span>,np.random.randint,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;individual&quot;</span>, tools.initRepeat, creator.Individual, toolbox.attribute, n=IND_NUM)</span><br><span class="line">toolbox.register(<span class="string">&quot;population&quot;</span>, tools.initRepeat, <span class="built_in">list</span>, toolbox.individual)</span><br><span class="line">pop = toolbox.population(n=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">toolbox.register(<span class="string">&quot;evaluate&quot;</span>, <span class="built_in">eval</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;select&quot;</span>, tools.selTournament, <span class="number">3</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;mate&quot;</span>, tools.cxUniform, indpb=<span class="number">0.5</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;mutate&quot;</span>, tools.mutFlipBit, indpb=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># tools.mutFlipBit()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stats = tools.Statistics(key=<span class="keyword">lambda</span> x: x.fitness.values)</span><br><span class="line">stats.register(<span class="string">&quot;avg&quot;</span>, np.mean)</span><br><span class="line">stats.register(<span class="string">&quot;std&quot;</span>, np.std)</span><br><span class="line">stats.register(<span class="string">&quot;min&quot;</span>, np.<span class="built_in">min</span>)</span><br><span class="line">stats.register(<span class="string">&quot;max&quot;</span>, np.<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">resultPop, logbook = algorithms.eaSimple(pop, toolbox, cxpb=<span class="number">0.5</span>, mutpb=<span class="number">0.2</span>, ngen=POP_NUM, stats=stats, verbose=<span class="literal">False</span>)</span><br><span class="line">logbook.header = <span class="string">&#x27;gen&#x27;</span>,<span class="string">&#x27;nevals&#x27;</span>,<span class="string">&#x27;avg&#x27;</span>,<span class="string">&#x27;std&#x27;</span>,<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(logbook)    </span><br></pre></td></tr></table></figure>

<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  pie
    title Key elements in Product X
    &quot;Calcium&quot; : 42.96
    &quot;Potassium&quot; : 50.05
    &quot;Magnesium&quot; : 10.01
    &quot;Iron&quot; :  5
  </pre></div>


<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><ul>
<li>我有一个好点子<div class="tabs" id="test4-"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test4--1">第一个Tab</button><button type="button" class="tab " data-href="test4--2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4--3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content" id="test4--1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4--2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4--3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li>
</ul>
<p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯繫作者獲得授權，非商業轉載請註明出處。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://jerryc.me/" title="JerryC" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />
              </div>
              <div class="flink-item-name">JerryC</div> 
              <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />
              </div>
              <div class="flink-item-name">Hexo</div> 
              <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>
            </a>
          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.youtube.com/" title="Youtube" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />
              </div>
              <div class="flink-item-name">Youtube</div> 
              <div class="flink-item-desc" title="视频网站">视频网站</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.weibo.com/" title="Weibo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Weibo" />
              </div>
              <div class="flink-item-name">Weibo</div> 
              <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://twitter.com/" title="Twitter" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />
              </div>
              <div class="flink-item-name">Twitter</div> 
              <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>
            </a>
          </div></div></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python基础--字符串</title>
    <url>/2024/09/21/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="Python基础之字符串"><a href="#Python基础之字符串" class="headerlink" title="Python基础之字符串"></a>Python基础之字符串</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><font face="宋体">
&nbsp;&nbsp;随着计算机发展日益加快，就算对于非计算机专业人士也通过键盘、鼠标等IO组件与计算机进行沟通。我们手指的每一次敲击，都送个计算机输入某个“字符”的信号，字符与字符串不仅是编程语言的基本组成元素，更是我们与计算机交流的桥梁
<br>
&nbsp;&nbsp;对于<mark class="hl-label blue">Python</mark> 这门现代编程语言，字符串的操作也是重中之重，接下来让我们一起学习有关字符串的内容吧
</font>

<h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h2><h3 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h3><ul>
<li>对于较早的C语言等，字符一般而言指<code>acsii</code>规定的128个字符，包括英文字母、数字、一些控制字符，而由这些字符组成的一串字符被形象地称作字符串<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;abcde&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>而<code>Python3</code>采用了号称万国码的<code>Unicode</code>字符集，可以表示包括中文、阿拉伯文等多国文字在内的若干字符，当然通过<code>Python</code>内置的编码、解码函数可以实现<code>utf-8</code>、<code>ascii</code>等其他编码方式之间的互相转换，当然这是后话了<br><strong>这里放一个编码的链接</strong></li>
<li>在<code>Python</code>中没有字符和字符串的明显区别，字符串可以使用<code>&#39;</code>或者<code>&quot;</code>定义，甚至对于多行字符串，可以使用<code>&quot;&quot;&quot;</code>或者<code>&#39;&#39;&#39;</code>来包含多行文本而不用在字符串间换行位置使用换行符<code>\n</code>，甚至允许使用<code>\</code>来拼接多行字符串为一行<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python中没有字符和字符串的区分</span></span><br><span class="line">char_one = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">char_two = <span class="string">&quot;a&quot;</span></span><br><span class="line">chars = <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(char_one)</span><br><span class="line"><span class="built_in">print</span>(char_two)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line">lines = <span class="string">&quot;&quot;&quot;this is a long string</span></span><br><span class="line"><span class="string">that spans multiple lines&quot;&quot;&quot;</span></span><br><span class="line">lines_single = <span class="string">&#x27;&#x27;&#x27;this is also a long </span></span><br><span class="line"><span class="string">string</span></span><br><span class="line"><span class="string">that spans mutiple lines too&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(lines)</span><br><span class="line"><span class="built_in">print</span>(lines_single)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接多行字符</span></span><br><span class="line">new_lines = <span class="string">&quot;this is a long string&quot;</span>\</span><br><span class="line">            <span class="string">&quot;that over&quot;</span>\</span><br><span class="line">            <span class="string">&quot;multiple lines&quot;</span></span><br><span class="line"><span class="built_in">print</span>(new_lines)</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">输出内容</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">this is a long string</span><br><span class="line">that spans multiple lines</span><br><span class="line">this is also a long string</span><br><span class="line">that spans multiple lines</span><br><span class="line">this is a long string that over multiple lines</span><br></pre></td></tr></table></figure>
</div></details></li>
</ul>
<hr>
<h3 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h3><ul>
<li>在<code>Python</code>中所有数据都是通过引用传递与使用的，这意味着我们一般只管理指向数据的引用（<del>大概是Python不用写数据类型的原因之一</del>），传递数据一般也只是传递数据的引用而非数据本身(除深浅拷贝外) <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单数据类型</span></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = a <span class="comment"># b接收的是a的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂数据类型</span></span><br><span class="line">str_a = <span class="string">&quot;1234&quot;</span></span><br><span class="line">str_b = str_a <span class="comment"># 同理接收的是引用 </span></span><br></pre></td></tr></table></figure></li>
<li>这时，小熊饼干突然想修改<code>str_b</code>的值便加入了一系列指令<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改前地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改前值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br><span class="line"></span><br><span class="line">str_b += <span class="string">&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改后地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改后值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">运行结果</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">展示修改前地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">展示修改前值:</span><br><span class="line">1234</span><br><span class="line">1234</span><br><span class="line">展示修改后地址:</span><br><span class="line">140123456789056</span><br><span class="line">342453543545131</span><br><span class="line">1234</span><br><span class="line">12345</span><br></pre></td></tr></table></figure></div></details>
我们惊奇地发现<code>str_b</code>指向的地址在修改前后发生了变化，这是因为字符串是一种<mark class="hl-label red">不可变类型</mark> ，任何针对字符串<strong>内容</strong>的改变都是不被允许的，所以我们进行修改<code>str_b</code>的操作<code>str_b += &quot;5&quot;</code>时，<code>Python</code>直接创建了一个新的变量<code>&quot;12345&quot;</code>然后将这个变量的地址赋给<code>str_b</code><details class="toggle" ><summary class="toggle-button" style="">什么是可变类型呢</summary><div class="toggle-content"><p>对于<code>str</code>、<code>tuple</code>、<code>byte</code>等<strong>不可变类型</strong>数据，一旦创立就无法修改其内容，而对于<code>list</code>、<code>dict</code>等<strong>可变类型</strong>我们允许在创立后继续修改其内容，如下</p>
<ul>
<li>甲方要求小熊饼干写一个复制一份<code>list</code>的Python文件，于是他写下如下代码<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_b = list_a</span><br></pre></td></tr></table></figure>
就在他写完时，甲方要求他在复制的副本中加入其他几个元素，睡眼朦胧的小熊饼干草草地写完了代码，没想到第二天代码出了问题，原始数据<code>list</code>遭到篡改，小熊饼干因此下岗了，呜呜呜<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改前地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改前值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_a)</span><br><span class="line"><span class="built_in">print</span>(list_b)</span><br><span class="line"></span><br><span class="line">list_b.append(<span class="number">5</span>)</span><br><span class="line">list_b.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改后地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改后值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_a)</span><br><span class="line"><span class="built_in">print</span>(list_b)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">打印修改前地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">打印修改前值:</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">打印修改后地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">打印修改后值:</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>
<font color = red>$Attention:$</font>小熊饼干通过赋值手段使<code>list_a</code>和<code>list_b</code>指向同一对象，又因为<code>list</code>类型是<strong>可变类型</strong>，所以对于其内容的修改是被允许的，这时我们可以通过<code>list_a</code>或者<code>list_b</code>中的某一个引用修改原对象内容，也就导致指向该对象的所有引用的“值”同时变化</li>
</ul>
</div></details></li>
</ul>
<hr>
<h3 id="字符串的简单操作"><a href="#字符串的简单操作" class="headerlink" title="字符串的简单操作"></a>字符串的简单操作</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>如果你曾经学习过C语言，一定记得字符串(字符数组)使用下标索引的场景（<del>熟悉而美好</del>，那么当然，<code>Python</code>提供了更为强大的索引功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">char = chars[<span class="number">0</span>] <span class="comment"># a</span></span><br><span class="line">char = chars[<span class="number">4</span>] <span class="comment"># d</span></span><br><span class="line">char = chars[-<span class="number">1</span>] <span class="comment"># g</span></span><br><span class="line">char = chars[-<span class="number">2</span>] <span class="comment"># f</span></span><br></pre></td></tr></table></figure>
<p>不仅提供了正向索引还有反向的，以后获得尾部的某些字符就轻松多了</p>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>Python中提供的一种相较于一般索引更加高级的索引方式，可以灵活地处理字符串一般格式为<code>str[start:end:step]</code></p>
<ul>
<li><code>start</code>：切片的起始索引值，缺省为字符串开头</li>
<li><code>end</code>：切片的结束索引值（不包括），缺省为字符串结束后（即包括字符串最后一个字符）</li>
<li><code>step</code>：切片的步长，默认为1  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向索引</span></span><br><span class="line">test_str = <span class="string">&quot;人生苦短,我用Python&quot;</span></span><br><span class="line">chars = test_str[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># &quot;生苦&quot;</span></span><br><span class="line">chars = test_str[:<span class="number">6</span>] <span class="comment"># &quot;人生苦短,我&quot;</span></span><br><span class="line">chars = test_str[<span class="number">6</span>:] <span class="comment"># &quot;用Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整段切片</span></span><br><span class="line">chars = test_str[:] <span class="comment"># &quot;人生苦短,我用Python&quot;</span></span><br><span class="line">chars = test_str[::<span class="number">2</span>] <span class="comment"># &quot;人苦，用yhn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒排索引(雾</span></span><br><span class="line">chars = test_str[::-<span class="number">1</span>] <span class="comment"># &quot;nohtyP用我,短苦生人&quot;</span></span><br><span class="line">chars = test_str[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">1</span>] <span class="comment"># &quot;我,短苦&quot;</span></span><br><span class="line">chars = test_str[:-<span class="number">7</span>:-<span class="number">1</span>] <span class="comment"># ”nohtyP“</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="str类"><a href="#str类" class="headerlink" title="str类"></a>str类</h2><p>相信学习过任何一门具有面向对象特性的编程语言的同学对这个词都不会陌生，简而言之，在面向对象设计中，万物都为“对象”；具有相同属性和行为的一群对象分为一个“类”，这个类抽象出对象群体共同的特性（属性）和行为（方法）</p>
<ul>
<li>在这里，各种不同的字符串都是对象，他们共同构成了类<code>str</code>，因为他们有某些共同的特性，如编码方式，有可以对所有字符串对象使用的方法，如查找子串，请你跟随小熊饼干，一起学习blog中讲解的第一个类<code>str</code></li>
<li>因为某些原因，我们将构造方法和一些魔术方法放在后续内容中介绍，敬请关注</li>
</ul>
<h3 id="内置方法（普通）"><a href="#内置方法（普通）" class="headerlink" title="内置方法（普通）"></a>内置方法（普通）</h3><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><ul>
<li><code>str.upper()</code><ul>
<li>将字符串内所有字符转为大写</li>
</ul>
</li>
<li><code>str.lower()</code><ul>
<li>将字符串内所有字符转为小写</li>
</ul>
</li>
<li><code>str.capitalize()</code><ul>
<li>将字符串首字母大写</li>
</ul>
</li>
<li><code>str.title()</code><ul>
<li>将字符串每个单词首字母大写<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">chars_upper = chars.upper()</span><br><span class="line">chars_lower = chars.lower()</span><br><span class="line">chars_cap = chars.capitalize()</span><br><span class="line">chars_title = chars.title()</span><br><span class="line"><span class="built_in">print</span>(chars_upper)</span><br><span class="line"><span class="built_in">print</span>(chars_lower)</span><br><span class="line"><span class="built_in">print</span>(chars_cap)</span><br><span class="line"><span class="built_in">print</span>(chars_title)</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看输出内容
    </button><div class="hide-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HELLO, WORLD</span><br><span class="line">hello, world</span><br><span class="line">Hello, world</span><br><span class="line">Hello, World</span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
</li>
</ul>
<hr>
<p><strong>未完待续</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
