<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>北航计算机组成P0课下</title>
    <url>/2024/09/24/CO_P0/</url>
    <content><![CDATA[<h1 id="北航计算机组成原理P0课下"><a href="#北航计算机组成原理P0课下" class="headerlink" title="北航计算机组成原理P0课下"></a>北航计算机组成原理P0课下</h1><h3 id="P0课下做题的一些分享，思路不一定是最佳实现思路，敬请大家斧正"><a href="#P0课下做题的一些分享，思路不一定是最佳实现思路，敬请大家斧正" class="headerlink" title="P0课下做题的一些分享，思路不一定是最佳实现思路，敬请大家斧正"></a>P0课下做题的一些分享，思路不一定是最佳实现思路，敬请大家斧正</h3><div class="note warning simple"><p>注意$logisim$的$Appearance$调整</p>
</div>

<h2 id="P0-Q1-CRC校验码"><a href="#P0-Q1-CRC校验码" class="headerlink" title="P0.Q1 CRC校验码"></a>P0.Q1 CRC校验码</h2><ul>
<li><del>读完了题目感觉题目和校验没什么关系</del><br>教程已经有了明显的提示，使用<strong>4位模2运算电路</strong>拼出11位的模2除法运算电路，考虑到本题应该是一个组合电路题，所以笔者使用了类似行波进位器的电路<ul>
<li>子电路定义如下(:sob:英语不好轻喷 )<table>
<thead>
<tr>
<th align="center">定义接口</th>
<th align="center">方向</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">div[2:0]</td>
<td align="center">I</td>
<td align="center">上一次$mod2$运算留下的余数</td>
</tr>
<tr>
<td align="center">new</td>
<td align="center">I</td>
<td align="center">本次$mod2$运算放在尾端的数</td>
</tr>
<tr>
<td align="center">todiv[3:0]</td>
<td align="center">I</td>
<td align="center">除数</td>
</tr>
<tr>
<td align="center">hi[2:0]</td>
<td align="center">O</td>
<td align="center">余数</td>
</tr>
<tr>
<td align="center">lo</td>
<td align="center">O</td>
<td align="center">商</td>
</tr>
</tbody></table>
</li>
<li>有八次$mod2$运算所以实现了八个子电路$M_i ( 1 \le i \le 8)$</li>
<li>利用<code>Splitter</code>分出后五位和三位零依次传入子电路中</li>
<li>连接$M_i.hi $ 与$ M_{i+1}.div$，就构成了行波$mod2$运算电路(<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-8.png" alt="alt text"></li>
</ul>
</li>
<li>其实本来看到$mod2$除法运算第一个想到的是循环移位，但是不知道能不能用时序，应该是不行吧</li>
<li>最后的最后，记得$Appearance$，记得$Appearance$，记得$Appearance$，重要的事情说三遍</li>
</ul>
<hr>
<h2 id="P0-Q2-实现GRF"><a href="#P0-Q2-实现GRF" class="headerlink" title="P0.Q2 实现GRF"></a>P0.Q2 实现GRF</h2><ul>
<li><del>啊，是寄存器堆，我们完了</del><br>整体思路不难，输入数据使用32位<code>DMX</code>分配到各个寄存器，读出操作将寄存器堆连接32位<code>MUX</code>得到输出，最后的使能端口我使用了主的使能端$We$和各个寄存器的使能端$We_i$的综合<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image.png" alt="alt text"></li>
<li><font color = red>$Attention$: </font>对于特殊寄存器<code>$0</code>，我没有单独实现为一个寄存器，而是将写入<code>$0</code>的数据线置空，读取<code>$0</code>的数据线恒置为$0$<br>其实主要是搭建大量的寄存器和连接像上图的<code>Tunnel</code>容易导致莫名的连线问题，不过你<del>可以CV</del>，但是既然助教们在logisim教程中写了自动化教程肯定有他们的道理，所以我们用<code>Python</code>自动化脚本帮助我们生成<code>GRF</code>，<del>感觉没我CV快是怎么回事</del></li>
<li>接下来构建<code>Python</code>自动化脚本<ul>
<li><p>首先，既然要使用脚本生成大量的寄存器，我们就需要找到<code>GRF</code>的最小单位，不然怎么愉快的for循环呢，大概是下面这样<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-2.png" alt="alt text"></p>
</li>
<li><p>但是，我们观察logisim的电路文件，发现连线的操作很麻烦，是从一个坐标点导向另一个坐标点，坐标点嘛，如果写入脚本中，不仅会耗费大量时间记录需要连线的位置而且更易错，这违背了我们<del>图方便、省事</del>的初衷</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">wire</span> <span class="attr">from</span>=<span class="string">&quot;(340,890)&quot;</span> <span class="attr">to</span>=<span class="string">&quot;(430,890)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wire</span> <span class="attr">from</span>=<span class="string">&quot;(70,1050)&quot;</span> <span class="attr">to</span>=<span class="string">&quot;(100,1050)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wire</span> <span class="attr">from</span>=<span class="string">&quot;(70,1070)&quot;</span> <span class="attr">to</span>=<span class="string">&quot;(100,1070)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wire</span> <span class="attr">from</span>=<span class="string">&quot;(70,250)&quot;</span> <span class="attr">to</span>=<span class="string">&quot;(130,250)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以我们对上述电路进行如下改造，丑是丑了点，但是<code>XML</code>格式十分简洁，反正logisim文件不是给人看的，机器看得明白就行<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-1.png" alt="alt text"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;4&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(500,320)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Register&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;width&quot;</span> <span class="attr">val</span>=<span class="string">&quot;32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;$18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(330,340)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;clk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(480,340)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;clk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(320,395)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;facing&quot;</span> <span class="attr">val</span>=<span class="string">&quot;east&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;width&quot;</span> <span class="attr">val</span>=<span class="string">&quot;32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;write_11&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(500,620)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;width&quot;</span> <span class="attr">val</span>=<span class="string">&quot;32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;rd_22&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(180,565)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;clk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(500,395)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;width&quot;</span> <span class="attr">val</span>=<span class="string">&quot;32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;rd_19&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(630,640)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;clk&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>因为原电路已经略显复杂，接下来我单开了一个circuit搭建了一个最小单位，然后就能比较方便地找到这个基本单位了，接下来就是使用Python生成xml文件了，我使用的源码如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">grf = <span class="string">&quot;&quot;&quot;   &lt;comp lib=&quot;4&quot; loc=&quot;%s&quot; name=&quot;Register&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;facing&quot; val=&quot;east&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;rst&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;clk&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;facing&quot; val=&quot;east&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">row = <span class="number">150</span></span><br><span class="line">col = <span class="number">75</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;grf.xml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            reg_loc = [<span class="number">200</span> + i * row, <span class="number">170</span> + j * col]</span><br><span class="line">            grf_name = <span class="string">f&quot;$<span class="subst">&#123;i * <span class="number">8</span> + j &#125;</span>&quot;</span></span><br><span class="line">            rd_name = <span class="string">f&quot;rd_<span class="subst">&#123;i * <span class="number">8</span> + j &#125;</span>&quot;</span></span><br><span class="line">            rd_loc = reg_loc</span><br><span class="line">            we_loc = [reg_loc[<span class="number">0</span>] - <span class="number">30</span>, reg_loc[<span class="number">1</span>] + <span class="number">10</span>]</span><br><span class="line">            we_name = <span class="string">f&quot;we_<span class="subst">&#123;i * <span class="number">8</span> + j &#125;</span>&quot;</span></span><br><span class="line">            rst_loc = [reg_loc[<span class="number">0</span>] - <span class="number">10</span>, reg_loc[<span class="number">1</span>] + <span class="number">20</span>]</span><br><span class="line">            clk_loc = [reg_loc[<span class="number">0</span>] - <span class="number">20</span>, reg_loc[<span class="number">1</span>] + <span class="number">20</span>]</span><br><span class="line">            wri_loc = [reg_loc[<span class="number">0</span>] - <span class="number">30</span>, reg_loc[<span class="number">1</span>]]</span><br><span class="line">            wri_name = <span class="string">f&quot;write_<span class="subst">&#123;i * <span class="number">8</span> + j &#125;</span>&quot;</span></span><br><span class="line">            <span class="comment"># print(grf % (tuple(reg_loc), grf_name, tuple(rd_loc), rd_name, tuple(we_loc), we_name,tuple(rst_loc), tuple(clk_loc), tuple(wri_loc), wri_name))</span></span><br><span class="line">            file.write(grf % (<span class="built_in">tuple</span>(reg_loc), grf_name, <span class="built_in">tuple</span>(rd_loc), rd_name, <span class="built_in">tuple</span>(we_loc), we_name,<span class="built_in">tuple</span>(rst_loc), <span class="built_in">tuple</span>(clk_loc), <span class="built_in">tuple</span>(wri_loc), wri_name))</span><br></pre></td></tr></table></figure>
<p><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-4.png" alt="alt text"><br>(大概是这样，间距还可以调整，修改代码中的<code>row</code>和<code>col</code>值即可)</p>
<br>
<br></li>
<li><p>对于连接<code>MUX</code>与<code>DMX</code>我们如法炮制，新开一个文件存放最小单位，这里的最小单位其实是就是自己，只是连接的32个<code>Tunnel</code>还是有规律的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;2&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(560,250)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Demultiplexer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;select&quot;</span> <span class="attr">val</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;width&quot;</span> <span class="attr">val</span>=<span class="string">&quot;32&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;enable&quot;</span> <span class="attr">val</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(520,10)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;write_1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">lib</span>=<span class="string">&quot;0&quot;</span> <span class="attr">loc</span>=<span class="string">&quot;(520,20)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Tunnel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;label&quot;</span> <span class="attr">val</span>=<span class="string">&quot;write_2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>发现在$y&#x3D;250$位置的DMX的第一个接口时从0开始的，每两个接口之间是10个单位，就可以使用for循环生成这些<code>Tunnel</code>了，源码如下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mux_1 = <span class="string">&quot;&quot;&quot;    </span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;2&quot; loc=&quot;(250,250)&quot; name=&quot;Multiplexer&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;select&quot; val=&quot;5&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;enable&quot; val=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;&quot;&quot;&quot;</span></span><br><span class="line">mux_2 = <span class="string">&quot;&quot;&quot;     </span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;2&quot; loc=&quot;(430,250)&quot; name=&quot;Multiplexer&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;select&quot; val=&quot;5&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;enable&quot; val=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">mux_loc = [(<span class="number">250</span>, <span class="number">250</span>), (<span class="number">430</span>, <span class="number">250</span>)]</span><br><span class="line">tunnel_rd = <span class="string">&quot;&quot;&quot;    </span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;facing&quot; val=&quot;east&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;width&quot; val=&quot;32&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">dmx = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;2&quot; loc=&quot;(560,250)&quot; name=&quot;Demultiplexer&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;select&quot; val=&quot;5&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;enable&quot; val=&quot;false&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;&quot;&quot;&quot;</span></span><br><span class="line">dmx_loc = (<span class="number">560</span>, <span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">tunnel_wr = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;comp lib=&quot;0&quot; loc=&quot;%s&quot; name=&quot;Tunnel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;a name=&quot;label&quot; val=&quot;%s&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;/comp&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mux.xml&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            tun_loc = [mux_loc[z][<span class="number">0</span>] - <span class="number">40</span>, <span class="number">90</span> + <span class="number">10</span> * i]</span><br><span class="line">            tun_name = <span class="string">f&quot;rd_<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(tunnel_rd % (<span class="built_in">tuple</span>(tun_loc), tun_name))</span><br><span class="line">            file.write(tunnel_rd % (<span class="built_in">tuple</span>(tun_loc), tun_name))</span><br><span class="line">    file.write(mux_1)</span><br><span class="line">    file.write(mux_2)</span><br><span class="line">    file.write(dmx)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        tun_loc = [dmx_loc[<span class="number">0</span>] + <span class="number">40</span>, <span class="number">90</span> + <span class="number">10</span> * i]</span><br><span class="line">        tun_name = <span class="string">f&quot;we_<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(tunnel_wr % (<span class="built_in">tuple</span>(tun_loc), tun_name))</span><br><span class="line">        file.write(tunnel_wr % (<span class="built_in">tuple</span>(tun_loc), tun_name))</span><br><span class="line">    <span class="comment"># 这里本来有一个写WD的write的for循环，图方便注释掉了</span></span><br><span class="line">    <span class="comment"># 只需要把tun_name自行调整即可，记得是DMX哦</span></span><br></pre></td></tr></table></figure>
<p><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-9.png" alt="alt text"></p>
</li>
</ul>
</li>
<li>这个题目好，P4写单周期的时候还能用</li>
<li><code>GRF</code>，巨能用，一节更比六节强，玩具车用完收音机还能用</li>
<li>最后的最后，记得$Appearance$，记得$Appearance$，记得$Appearance$，重要的事情说三遍(你怎么知道我$Pre$ 被$Appearance$卡到④了)</li>
</ul>
<hr>
<h2 id="P0-Q3-导航"><a href="#P0-Q3-导航" class="headerlink" title="P0.Q3 导航"></a>P0.Q3 导航</h2><ul>
<li><p><del>爵士好题</del></p>
</li>
<li><p>刚开始看到这道题本来打算用<code>Mealy</code>机，使用<code>Mealy</code>机真的很方便，因为<code>hit</code>和<code>arrive</code>都与<code>status</code>、<code>dir</code>有关，但是因为题目指定了<code>Moore</code>机所有很快就丢弃了这个思路</p>
</li>
<li><p>然后想到了创建多个状态包括撞墙的状态，然后写出复杂的状态转移方程，最后一共有13个状态吧，构建状态转移方程过于复杂，所以也丢弃了</p>
</li>
<li><p>最后我还是决定使用<code>Mealy</code>状态机和<code>Register</code>构建一个<code>Moore</code>状态机（假装输出只和状态相关）</p>
<ul>
<li><code>Register</code>保存<code>hit</code>的值，使得<code>hit</code>只在时钟上升沿变化，看起来就像是只随着<code>status</code>变化了（因为<code>status</code>是随着时钟上升沿变化的），而<code>arrive</code>本身就可以只与<code>status</code>有关，那么我们关于<code>status</code>的<code>Moore</code>机就构建好了</li>
</ul>
</li>
<li><p>状态转移的真值表如下</p>
<table>
<thead>
<tr>
<th align="center">status</th>
<th align="center">dir</th>
<th align="center">next_status</th>
<th align="center">arrive</th>
<th align="center">hit</th>
</tr>
</thead>
<tbody><tr>
<td align="center">000</td>
<td align="center">00</td>
<td align="center">001</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">000</td>
<td align="center">01</td>
<td align="center">000</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">000</td>
<td align="center">10</td>
<td align="center">000</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">000</td>
<td align="center">11</td>
<td align="center">000</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">001</td>
<td align="center">00</td>
<td align="center">011</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">001</td>
<td align="center">01</td>
<td align="center">010</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">001</td>
<td align="center">10</td>
<td align="center">000</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">001</td>
<td align="center">11</td>
<td align="center">001</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">010</td>
<td align="center">00</td>
<td align="center">100</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">010</td>
<td align="center">01</td>
<td align="center">010</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">010</td>
<td align="center">10</td>
<td align="center">010</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">010</td>
<td align="center">11</td>
<td align="center">001</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">011</td>
<td align="center">00</td>
<td align="center">011</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">011</td>
<td align="center">01</td>
<td align="center">100</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">011</td>
<td align="center">10</td>
<td align="center">001</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">011</td>
<td align="center">11</td>
<td align="center">011</td>
<td align="center">0</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">??</td>
<td align="center">000</td>
<td align="center">1</td>
<td align="center">0</td>
</tr>
</tbody></table>
</li>
<li><p>主电路图大致如下<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-5.png" alt="alt text"></p>
</li>
<li><p>在群里看到向巨只用了两位的<code>type</code>，我也想了一下，下面是我的思路</p>
<ul>
<li>相较于原本的电路，将状态<code>100</code>即在B机房这个状态去除，改为在<code>S2</code>状态下 <code>dir</code>为<code>01</code>、<code>S3</code>状态下<code>dir</code>为<code>00</code>时，<code>arrive</code>置1，且返回A机房（<code>Mealy</code>状态机 + 寄存器）</li>
<li><code>arrive</code>模块也使用<code>Register</code>保存，在时钟上升沿更新</li>
<li>在A机房状态下，如果<code>arrive</code>为1，则总状态不更新，类似于同步复位信号，不过<code>status</code>这个时候已经是<code>00</code></li>
</ul>
</li>
<li><p>向巨，yyds</p>
</li>
</ul>
<hr>
<h2 id="P0-Q4-正则表达式"><a href="#P0-Q4-正则表达式" class="headerlink" title="P0.Q4 正则表达式"></a>P0.Q4 正则表达式</h2><ul>
<li><p><del>欸，这道题没有$Q3$难欸，怎么放在$Q4$</del><br>好了回归题目，这次的题目是一个<code>Mealy</code>类型的有限状态机，所以千万不要写错成了<code>Moore</code>类型的状态机啊</p>
</li>
<li><p>主要就是<code>Moore</code>状态机会比<code>Mealy</code>状态机多一个状态，因为<code>Moore</code>状态机保存了最后匹配成功的一个状态，<code>Mealy</code>状态机不需要保存匹配成功的状态，只需要在输入最后匹配条件时输出$1$，并且回到非法状态即可</p>
</li>
<li><p><code>Mealy</code>状态机状态转移图<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-12.png" alt="alt text"></p>
</li>
<li><p><code>Moore</code>状态机状态转移图<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-10.png" alt="alt text"></p>
</li>
<li><p><code>Mealy</code>状态机状态转移方程</p>
<table>
<thead>
<tr>
<th align="center">status</th>
<th align="center">input</th>
<th align="center">next_status</th>
<th align="center">output</th>
</tr>
</thead>
<tbody><tr>
<td align="center">00</td>
<td align="center">00</td>
<td align="center">00</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">00</td>
<td align="center">01</td>
<td align="center">01</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">00</td>
<td align="center">10</td>
<td align="center">00</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">00</td>
<td align="center">11</td>
<td align="center">00</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">01</td>
<td align="center">00</td>
<td align="center">10</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">01</td>
<td align="center">01</td>
<td align="center">01</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">01</td>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">01</td>
<td align="center">11</td>
<td align="center">00</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">00</td>
<td align="center">00</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">01</td>
<td align="center">01</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">10</td>
<td align="center">00</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">11</td>
<td align="center">00</td>
<td align="center">0</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h2 id="P0-附加题-ftoi"><a href="#P0-附加题-ftoi" class="headerlink" title="P0.附加题 ftoi"></a>P0.附加题 ftoi</h2><ul>
<li><p><del>半精度浮点数，所以不能用C语言编测试数据了，助教很坏</del></p>
</li>
<li><p>根据题目改编的IEEE浮点数，我们大致可以分为四类</p>
<ol>
<li>$规格化小数$</li>
<li>$非规格化小数$</li>
<li>$0$</li>
<li>$\infty$</li>
<li>$NAN$</li>
</ol>
</li>
<li><p>浮点数的类型又可以由下面三个bool型变量决定</p>
<ol>
<li><code>exp_iszero</code></li>
<li><code>exp_isfull</code></li>
<li><code>frac_iszero</code></li>
</ol>
</li>
<li><p>$NAN$ 和 $\infty$只有<code>frac_iszero</code>不一致，又因为刚好有5个类型，所以干脆将这两个类型合并为一个，然后使用真值表技术生成两位<code>type</code>关于三个变量的子电路</p>
<table>
<thead>
<tr>
<th align="center">定义接口</th>
<th align="center">方向</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">exp_iszero</td>
<td align="center">I</td>
<td align="center">所得浮点数exponent位置是否全为0</td>
</tr>
<tr>
<td align="center">exp_isfull</td>
<td align="center">I</td>
<td align="center">所得浮点数exponent位置是否全为1</td>
</tr>
<tr>
<td align="center">frac_iszero</td>
<td align="center">I</td>
<td align="center">所得浮点数fraction位置是否全为0</td>
</tr>
<tr>
<td align="center">type[1:0]</td>
<td align="center">O</td>
<td align="center">浮点数属于的类型</td>
</tr>
</tbody></table>
<ul>
<li>状态转移真值表如下<table>
<thead>
<tr>
<th align="center">exp_iszero</th>
<th align="center">exp_isfull</th>
<th align="center">frac_iszero</th>
<th align="center">type</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">00</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">01</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">?</td>
<td align="center">11</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>后两个类型的输出都是$0$,前两个类型的唯一区别是<code>frac</code>定点数的小数点前是否有默认的$1$，所以先讲述而这在实现上的共性</p>
<ul>
<li>通过<code>exponent</code>的值和<code>bias</code>的值算出真正需要的位移值<code>shift</code>(补码编码)，这里使用加法电路实现减法电路不用考虑溢出，这得益于移码中<code>bias</code>选择(一般是$\lfloor exp_{max} &#x2F;2 \rfloor$)</li>
<li>如果<code>shift</code>是负数，则直接输出$0$即可，因为$0 \lt frac \lt 2$，所以至多右移$1$位就直接为$0$</li>
<li>我通过<code>shift</code>与$10$比较直接决定左移还是右移，好处是不需要考虑先左移<code>shift</code>再右移$10$可能导致的高位$1$损失，坏处是又要写两个减法电路（，然后再<code>MUX</code>选择结果</li>
<li>根据<code>sign</code>符号位决定是否<code>取反加1</code>，同样不需要考虑溢出</li>
</ul>
</li>
<li><p>接下来分别说明两次可以忽略溢出的原因（<del>有点废话的证明</del>）</p>
<ul>
<li>对于第一个算的<code>shift</code>(补码编码)，主要原因是非符号数的减法电路和符号数的减法电路实际是一套电路，而且<code>bias</code>设置的好，如果<code>exponent</code>的首位是0，我们理解为补码的减法电路，正数减去正数不会溢出，得到的答案（补码是正确的），如果<code>exponent</code>的首位是1，因为<code>bias</code>设置的合理，只有<code>11111</code>的情况会无法得到正数，但是这种情况已经被排除了（因为其他的<code>type</code>使用了），所以得到的补码也是正确的（正数的编码是自己）</li>
<li>第二个负数取补码的情况时，为什么不需要考虑可能已经溢出到32位外的值，取完补码再取后32位，而是直接不考虑开始时的溢出，这和一个小结论有关，对于一个正数取其相反数的补码可以这样做：从这个正数最低位的1开始，到最高位为止中间的所有数字取反，假设1全部溢出在32位外，则后32位始终保持0，假设后32位中有1，根据结论无论考不考虑溢出部分后32位的值都应该一致的<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/image-6.png" alt="alt text"></li>
</ul>
</li>
</ul>
<hr>
<h2 id="P0-推荐题目"><a href="#P0-推荐题目" class="headerlink" title="P0.推荐题目"></a>P0.推荐题目</h2><p>好，但是现在还没出</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
        <category>课下复习</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络--概述</title>
    <url>/2024/10/04/CN_u1/</url>
    <content><![CDATA[<h1 id="计算机网络–概述"><a href="#计算机网络–概述" class="headerlink" title="计算机网络–概述"></a>计算机网络–概述</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>国庆好无聊啊，小熊饼干接待完朋友、过完生日之后实在是没有什么事了，但是又不想更新<code>Python</code>，所以他决定开始学习计网</li>
<li>本栏目仅仅是笔者自学内容，与北京航空航天大学的计网无关，我不是我没有</li>
</ul>
<h2 id="什么是计网"><a href="#什么是计网" class="headerlink" title="什么是计网"></a>什么是计网</h2><ul>
<li>硬件<ul>
<li><strong>主机</strong>,又称<strong>端系统</strong>可以简单理解我们日常使用的电脑、服务器、手机、各类智能嵌入式系统等，他们处于计算机网络的边缘，所以称为端系统</li>
<li><strong>通信链路</strong>，像网线、电缆、光纤等物理连接设备，例如可以将两台电脑使用网卡连接，就组成了一个简单的计算机网络</li>
<li><strong>通信设备</strong>，端系统向计算机网络核心传递信息的中转站，例如集线器、交换机、路由器，通过他们我们可以将若干简单的计算机网络组成复杂的计算机网络</li>
</ul>
</li>
<li>软件<ul>
<li>可以是在主机运行的应用程序，例如微信、QQ、网盘等，方便用户使用，实现资源共享的程序</li>
<li>可以是在通信设备中的控制程序，用以控制通信设备传输信息</li>
</ul>
</li>
<li>协议<ul>
<li>规定计算机网络中的通信规则，利用这种规则封装传递的信息或者解构信息</li>
</ul>
</li>
<li>$Attention$<ul>
<li>使用集线器可以简单连接某几台设备，缺点是可能导致发送信息之间的冲突</li>
<li>使用交换机则不会出现信息冲突，不过交换机一般用于构建较小的计算机网络</li>
<li>使用路由器可以构建计算机网络核心，即各种通路</li>
</ul>
</li>
</ul>
<p>举一个快递的例子(似乎所有教材都会有一个快递的例子)：快递相当于传递的信息；各个快递终点站、快递驿站相当于端系统；公路、高速、立交桥相当于各种通信链路；快递中转站及仓库可以理解为通信设备；快递公司的运行规则和交通规则相当于协议</p>
<hr>
<h2 id="计网的功能"><a href="#计网的功能" class="headerlink" title="计网的功能"></a>计网的功能</h2><ul>
<li>数据通信<ul>
<li>实现计算机（端系统）之间的数据传输，是最基本、最重要的功能</li>
</ul>
</li>
<li>资源共享<ul>
<li>请求服务器处理、网盘、分享视频、应用商店等</li>
</ul>
</li>
<li>分布式处理<ul>
<li>将某个复杂任务分配给网络中多台计算机处理，提高任务处理效率</li>
</ul>
</li>
<li>提高可靠性<ul>
<li>网络中各台计算机互为替代，数据冗余备份等操作</li>
</ul>
</li>
<li>复杂均衡<ul>
<li>网络中多台计算机共同分担繁杂工作，如游戏服务器</li>
</ul>
</li>
</ul>
<hr>
<h2 id="计网通信"><a href="#计网通信" class="headerlink" title="计网通信"></a>计网通信</h2><h3 id="计网通信方式"><a href="#计网通信方式" class="headerlink" title="计网通信方式"></a>计网通信方式</h3><ul>
<li>因为在计算机之前已经有电话与发报机等可以传递信息的工具，那么计算机通信方式是否可以参考“前辈”的经验呢？答案是肯定的</li>
</ul>
<h4 id="电路交换技术"><a href="#电路交换技术" class="headerlink" title="电路交换技术"></a>电路交换技术</h4><ul>
<li>曾经的固定电话是通过电话线连接到电路交换器上的，在指定通信方与被通信方之后通过人工或者机器的方式连接实际物理电路，传递消息<ul>
<li>建立连接（尝试占用资源）</li>
<li>通信（持续占用通信资源）</li>
<li>断开连接（归还占用资源）<br><img src="/CN_u1_1.png" alt="电路交换示意图"></li>
</ul>
</li>
<li>优缺点分析<ul>
<li>优点<ul>
<li>建立了专用的物理电路，两个用户始终占用线路资源，数据传输速度快</li>
</ul>
</li>
<li>缺点<ul>
<li>建立&#x2F;释放连接需要额外的时间开销，等待通信时间可能过长</li>
<li>线路被通信双方占用，利用率差</li>
<li>线路的分配灵活性差（线路单一）</li>
<li>不支持差错控制，无法更改或者发现通信的错误</li>
</ul>
</li>
</ul>
</li>
<li>由于电路交换技术适合少频次大量数据的场景，一般的计算机通信常常是高频次少量数据的传递，所以计算机通信方式不适合<strong>直接沿用</strong>电路交换技术（为什么是直接沿用呢？）</li>
</ul>
<h4 id="报文交换技术"><a href="#报文交换技术" class="headerlink" title="报文交换技术"></a>报文交换技术</h4><ul>
<li>发报机通过线路连接到报文转发机上，通过对信息头部加入地址信息，由转发机自动向目的地转发，而不需要实际地接线<br><img src="/CN_u1_2.png" alt="报文交换示意图"></li>
<li>优缺点分析<ul>
<li>优点<ul>
<li>不用占用通信双方中地资源，利用率高</li>
<li>无需建立连接，线路可以灵活分配</li>
<li>交换节点时可以“差错控制”</li>
</ul>
</li>
<li>缺点<ul>
<li>报文长度不定，报文交换机地存储空间难以规定大小</li>
<li>长报文存储转发的时间开销大，缓存开销大</li>
<li>长报文的纠错困难，重发的代价大</li>
</ul>
</li>
</ul>
</li>
<li>由于对长报文的传输支持困难，所以计算机通信方式也没有沿用报文交换技术，而是在报文交换技术的基础上改进而成的分组交换技术</li>
</ul>
<h4 id="分组交换技术"><a href="#分组交换技术" class="headerlink" title="分组交换技术"></a>分组交换技术</h4><ul>
<li>将长报文分为若干段，称为分组(Packet)然后我们的传递最小单位由报文变成分组<br><img src="/CN_u1_3.png" alt="分组交换示意图"></li>
<li>优缺点分析<ul>
<li>优点<ul>
<li>同报文交换技术</li>
<li>存储转发的时间开销小，缓存开销小</li>
<li>不易出错，且重传的代价小</li>
</ul>
</li>
<li>缺点<ul>
<li>控制信息占比增加</li>
<li>存储转发时延依旧存在</li>
<li>发送的各个分组存在顺序问题，可能导致混乱</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="虚电路交换技术"><a href="#虚电路交换技术" class="headerlink" title="虚电路交换技术"></a>虚电路交换技术</h4><ul>
<li>对于分组交换技术可能出现的顺序问题，虚电路技术提供了一种方式解决（沿用了电路交换技术的策略）<ul>
<li>建立连接（没有实际电路，仅作规划路径使用）</li>
<li>通信（分组按照顺序以构建好的路线传递，通信双方不用占用线路）</li>
<li>释放连接<br><img src="/CN_u1_4.png" alt="虚电路交换示意图"></li>
</ul>
</li>
<li>优缺点分析<ul>
<li>优点<ul>
<li>同分组交换技术优点</li>
</ul>
</li>
<li>缺点<ul>
<li>同分组交换技术缺点</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ul>
<li>对于上述电路交换技术、报文交换技术、分组交换技术进行性能的分析<br><img src="/CN_u1_5.png" alt="时序图"><br><img src="/CN_u1_6.png" alt="性能分析对比图"></li>
</ul>
<hr>
<h2 id="计网分类"><a href="#计网分类" class="headerlink" title="计网分类"></a>计网分类</h2><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><ul>
<li>广域网(Wide Area Network)<ul>
<li>范围大，跨省、跨国、跨洲</li>
</ul>
</li>
<li>城域网(Metropolitan Area Network)<ul>
<li>范围较大，一个或几个相邻的城市</li>
<li>通信技术采用“以太网技术”，常并入局域网范畴讨论</li>
</ul>
</li>
<li>局域网(Local Area Network)<ul>
<li>范围稍小，学校&#x2F;企业&#x2F;家庭等</li>
<li>通信技术采用“以太网技术”</li>
</ul>
</li>
<li>个域网(Personal Area Network)<ul>
<li>范围小，家庭&#x2F;个人</li>
<li>常使用无线技术将个人设备连接起来的网络，因此也被称为无线个域网(WPAN)</li>
</ul>
</li>
</ul>
<h3 id="传输技术"><a href="#传输技术" class="headerlink" title="传输技术"></a>传输技术</h3><ul>
<li>广播式网络<ul>
<li>计算机发送数据分组时，广播范围内的所有计算机都会收到该分组，通过检查分组地址决定是否接受分组</li>
</ul>
</li>
<li>点对点网络<ul>
<li>精确地发向某个计算机</li>
</ul>
</li>
</ul>
<h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><ul>
<li>总线形结构<ul>
<li>数据采取广播式技术，存在“总线争用”的现象</li>
<li>集线器连接的设备</li>
</ul>
</li>
<li>环形结构<ul>
<li>数据广播式传播但是，可以通过“令牌”指定当前发送数据的计算机，即拿到“令牌”者可以控制总线的数据，从而解决“总线争用的问题”</li>
<li>令牌环网</li>
</ul>
</li>
<li>星形结构<ul>
<li>由中央设备实现各个设备的“点对点”传输，不存在“总线争用”的现象</li>
<li>以太网交换机连接的设备</li>
</ul>
</li>
<li>网状结构<ul>
<li>数据通过各个中间节点逐一存储转发，实现数据“点对点”的传输</li>
<li>由众多路由器构建的广域网</li>
</ul>
</li>
</ul>
<h3 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h3><ul>
<li>公用网<ul>
<li>公开的网络，只要向<code>ISP</code>付钱即可</li>
</ul>
</li>
<li>专用网<ul>
<li>内部使用网络，例如，国家总局、银行等的内网</li>
</ul>
</li>
</ul>
<hr>
<h2 id="计网性能指标"><a href="#计网性能指标" class="headerlink" title="计网性能指标"></a>计网性能指标</h2><ul>
<li>信道<ul>
<li>即信息传输的通道，一般而言我们所说的<strong>通信线路</strong>往往对应着一个发送信道和一个接收信道</li>
</ul>
</li>
<li>速度相关<ul>
<li>速率，连接在网络的节点的数据沿着信道传输的速率，也称作<strong>数据传输速率</strong>，单位一般为(<code>bps</code> <code>Kbps</code> <code>Mbps</code>)，这里的<code>K</code>是 $10^3$，与计算机组成不同</li>
<li>带宽<ul>
<li>含义一，表示一个信道所能传输数据的最大速率，即<strong>最高数据率</strong>，可以有上行带宽和下行带宽</li>
<li>含义二，表示某个信道允许通过的信号频带范围，单位是<code>Hz</code>，两个含义其实有某些关系哦</li>
<li>节点间通信的最高速率由带宽和节点性能共同限制</li>
</ul>
</li>
<li>吞吐量<ul>
<li>单位时间通过某个网络的实际数量，所以要计算上行和下行速率</li>
</ul>
</li>
</ul>
</li>
<li>时延相关<ul>
<li>各种时延<ul>
<li>发送时延(传输时延)<ul>
<li>将数据全部传入信道的时间($ \frac{M_{数据大小}} {V_{数据传输速率}} $)</li>
</ul>
</li>
<li>传播时延<ul>
<li>数据在信道上传输的时间($ \frac{L_{信道长度}} {V_{信号传播速率}} $)</li>
</ul>
</li>
<li>处理时延<ul>
<li>路由器处理数据的时间(分析首部、查找存储转发表)</li>
</ul>
</li>
<li>排队时延<ul>
<li>数据入队和出队花费的时间<img src="/./_image/2024-10-05/81ca04230e5a922a25280cfccee04f61.jpg"></li>
</ul>
</li>
</ul>
</li>
<li>时延带宽积<ul>
<li>$ X_{时延带宽积} &#x3D; T_{传播时延} \times M_{带宽} $</li>
</ul>
</li>
<li>往返时延(Round-Trip Time)<ul>
<li>从发送方<strong>发送完数据</strong>，到发送方<strong>收到来自接收方的确认</strong>总共经历的时间</li>
<li>例如，游戏时延即“手机-服务器”的往返时延<code>RTT</code></li>
</ul>
</li>
</ul>
</li>
<li>信道利用率<ul>
<li>$ \frac{T_{有数据通过}} {T_{有数据通过} + T_{没有数据通过}} $</li>
<li>信道利用率不能太低，会浪费资源</li>
<li>信道利用率不能太高，容易导致网络拥塞</li>
</ul>
</li>
</ul>
<hr>
<h2 id="计网分层"><a href="#计网分层" class="headerlink" title="计网分层"></a>计网分层</h2><ul>
<li>就如快递链一样，计算机网络中实现传递数据也是需要实现许许多多的功能，例如封装数据、校验数据、解析数据等等各种复杂的功能</li>
<li>这里给出一些完整功能，可以先尝试理解<ul>
<li>差错控制：确保数据在传输过程中不会出错</li>
<li>流量控制：发送端发送数据的速率必须比接收端的接收速率小，来得及接收</li>
<li>分段与重装：发送端将要发送的数据分解为更小的单位，并且在接收端将其还原</li>
<li>复用与分用：发送端几个高层会话共同使用一条低层的连接，然后在接收端进行分用</li>
<li>连接建立与释放：交换数据前先建立一条逻辑连接，数据传输结束后释放</li>
</ul>
</li>
<li>采取分层的策略可以将问题分为各种小问题，以局部实现的策略实现</li>
</ul>
<h3 id="常见分层结构"><a href="#常见分层结构" class="headerlink" title="常见分层结构"></a>常见分层结构</h3><ul>
<li><code>OSI</code>模型<ul>
<li>考虑的功能更加全面，会出现统一功能出现在多个层面</li>
<li>法律上的标准</li>
</ul>
<ol>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>会话层</li>
<li>表示层</li>
<li>应用层</li>
</ol>
</li>
<li><code>TCP/IP</code>模型<ul>
<li>结构更加简单，同一功能只会出现在某一个层面</li>
<li>事实上的标准</li>
</ul>
<ol>
<li>网络接口层</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ol>
</li>
<li>教学模型<ol>
<li>物理层</li>
<li>数据链路层</li>
<li>网络层</li>
<li>传输层</li>
<li>应用层</li>
</ol>
</li>
<li><strong>实体</strong><ul>
<li>同处于某一层的活动元素(硬件与软件)被称为第<code>n</code>层的实体，不同节点上的同一层被称为<strong>对等层</strong>，同一层的对应实体被称为<strong>对等实体</strong></li>
</ul>
</li>
<li><strong>协议</strong><ul>
<li>对等实体的通信规则，约束了对等实体之间的数据传输的要求</li>
</ul>
</li>
<li><strong>接口</strong><ul>
<li>同一节点相邻两层的实体交换信息的逻辑通道，又称为<strong>服务访问点</strong>(Service Access Point，SAP)</li>
</ul>
</li>
<li><strong>服务</strong><ul>
<li>同一节点相邻两层中下层为上层提供的功能调用(这里层数小的在下，层数大的在上)</li>
</ul>
</li>
</ul>
<h3 id="数据传输过程"><a href="#数据传输过程" class="headerlink" title="数据传输过程"></a>数据传输过程</h3><ul>
<li>原始数据通过多层处理为物理信号传输，在通过多层反处理转换回数据<br><img src="/./_image/2024-10-05/815195ad09dbf52e2ebbed3f768f3459.jpg"></li>
<li>数据定义<ul>
<li>协议数据单元(Protocol Data Unit)<ul>
<li>对等层之间传递的消息，第<code>n</code>层的协议数据单元写作<code>n-PDU</code></li>
</ul>
</li>
<li>服务数据单元(Service Data Unit)<ul>
<li>为完成这一层实体而从上一层传入的数据，第<code>n</code>层的服务数据单元写作<code>n-SDU</code></li>
</ul>
</li>
<li>协议控制信息(Protocol Control Infomation)<ul>
<li>控制协议操作的信息，第<code>n</code>层的协议控制信息写作<code>n-PCI</code></li>
</ul>
</li>
<li>三者之间的关系<ul>
<li><code>n-PDU</code> &#x3D; <code>n-PCI</code> + <code>n-SDU</code></li>
<li><code>n-SDU</code> &#x3D; <code>n-1-PDU</code></li>
</ul>
</li>
</ul>
</li>
<li>协议定义<ul>
<li>语法<ul>
<li>数据与控制信息的格式。例如协议控制信息部分占几个字节、每个字节是什么含义、协议的数据部分最多有多少字节</li>
</ul>
</li>
<li>语义<ul>
<li>需要发送何种控制信息，完成何种动作及作出何种应答，例如发送完数据后接收方是否需要“应答”，以及应答的种类(传输成功、传输失败)</li>
</ul>
</li>
<li>时序<ul>
<li>执行各种操作的条件、时序关系等，即事件实现顺序的详细说明，例如发送方发送数据后接收方需要立即应答，如果发送方在 10 秒内没有应答，发送方会再次发送数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="OSI与TCP-IP"><a href="#OSI与TCP-IP" class="headerlink" title="OSI与TCP/IP"></a><code>OSI</code>与<code>TCP/IP</code></h3><h4 id="OSI模型详述"><a href="#OSI模型详述" class="headerlink" title="OSI模型详述"></a><code>OSI</code>模型详述</h4><ul>
<li>常见网络设备功能层次<ul>
<li>主机：<code>#1 ~ #7</code></li>
<li>集线器：<code>#1</code></li>
<li>交换机：<code>#1 ~ #2</code></li>
<li>路由器：<code>#1 ~ #3</code></li>
<li>物理传输媒体：<code>#0</code></li>
</ul>
</li>
<li>各层详解<ol>
<li>物理层<ul>
<li>实现相邻节点<code>bit</code>传输</li>
<li>定义电路接口参数，形状、尺寸、引脚数等</li>
<li>定义传输信号含义，例如 5v 代表 1，1v 代表 0，每<code>bit</code>传输的持续时间为 0.1ms</li>
</ul>
</li>
<li>数据链路层<ul>
<li>保证相邻节点间的链路<strong>逻辑上无差错</strong></li>
<li>原始数据传入链路层，链路层对长信息<strong>拆分并添加校验位</strong>组成**帧(Frame)**含有多个<code>bit</code>，再将帧陆续传给物理层转化为实际的物理信号传输       </li>
<li><strong>差错控制</strong>：检错+纠错或者检错+丢弃+重传</li>
<li><strong>流量控制</strong>：协调相邻节点的帧的传输速率</li>
</ul>
</li>
<li>网络层<ul>
<li>将分组<strong>从源结点转发至目的结点</strong></li>
<li><strong>路由选择</strong>：构造并且维护路由表，选择从源结点转向目的结点的最佳路径</li>
<li><strong>分组转发</strong>：将分组从合适的端口传出</li>
<li><strong>拥塞控制</strong>：发现网络拥塞，并采取措施缓解拥塞</li>
<li><strong>网际互联</strong>：由于各个局域网可能采用不同的技术，通过网络层实现异构网络的互联</li>
<li><strong>差错控制</strong>：校验分组</li>
<li><strong>流量控制</strong>：协调分组的传输速率</li>
<li><strong>连接建立与释放</strong>：建立虚电路发送分组</li>
<li><strong>可靠传输管理</strong>：接收方返回分组确认消息</li>
</ul>
</li>
<li>传输层<ul>
<li>端到端的通信，即实现<strong>进程到进程</strong>的通信</li>
<li>多个不同进程的数据通过传输层组合成<strong>报文段</strong>(Segment)</li>
<li><strong>复用与分用</strong>：发送端的几个高层实体例如微信、QQ 的数据共同组成报文段，复用接下来低层的路线；在接收端将报文段重新拆分为多个端口的数据传入</li>
<li><strong>差错控制</strong>：校验报文段</li>
<li><strong>流量控制</strong>：协调报文段段的传输速率</li>
<li><strong>建立连接与释放</strong>：建立虚电路发送报文段</li>
<li><strong>可靠传输管理</strong>：接收方返回报文段确认消息</li>
</ul>
</li>
<li>会话层<ul>
<li>管理进程间的会话</li>
<li><strong>会话管理</strong>：采用检查点机制，当通信失效时从检查点继续恢复通信</li>
</ul>
</li>
<li>表示层<ul>
<li>解决不同主机上编码方式不同，数据格式转换还有压缩、解密等</li>
</ul>
</li>
<li>应用层<ul>
<li>实现特定的网络应用</li>
<li>各类数据以<strong>报文</strong>(Message)为单位传递</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="TCP-IP模型详述"><a href="#TCP-IP模型详述" class="headerlink" title="TCP/IP模型详述"></a><code>TCP/IP</code>模型详述</h4><ul>
<li><code>OSI</code>与<code>TCP/IP</code>模型的区别<ul>
<li><code>OSI.#5~#7</code>与<code>TCP/IP.#4</code><ul>
<li>数据编码格式转换与会话管理功能并不是对于每个网络应用都需要的，所以可以并入应用层</li>
<li>对于某些需要这种特定功能的应用，可以采用具有特定功能的协议去完成</li>
</ul>
</li>
<li><code>OSI.#1~#2</code>与<code>TCP/IP.#1</code><ul>
<li>网络层将分组传递给网络接口层，但是不硬性规定处理或者传输分组的方式</li>
</ul>
</li>
<li><code>OSI.#3</code>与<code>TCP/IP.#2</code><ul>
<li><code>TCP/IP</code>模型的网络层取消了对于分组检查与控制协调的若干功能，如差错控制、流量控制、连接管理、可靠传输管理</li>
<li><code>TCP/IP</code>模型的网络层的传输数据不可靠</li>
<li><code>TCP/IP</code>模型中不需要中间路由器等计算机网络核心管理流量等行为而将各种功能施加在端系统中</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>北航计算机组成P1课下</title>
    <url>/2024/09/28/CO_P1/</url>
    <content><![CDATA[<h1 id="北航计算机组成原理P1课下"><a href="#北航计算机组成原理P1课下" class="headerlink" title="北航计算机组成原理P1课下"></a>北航计算机组成原理P1课下</h1><div class="note info simple"><p>通过阅读本文，你可以大致了解北京航空航天大学2023级计算机组成原理P1课下的相关内容，希望能对你有所帮助</p>
</div>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><del>发现教程有了，不愧是STAR</del></li>
<li>在阅读本次P1题解分享之前，我想单独分享一些关于<code>Verilog</code>编写有限状态机的内容(佬跳过，好吗？好的)</li>
<li>从学习完<code>Verilog</code>到<code>Pre</code>上机之间的很长一段时间，我写<code>Verilog</code>有限状态机都只有一个过程块（<del>可能大概应该有和我一样的同学吧</del>），就像下面这样<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">define</span> S0 2&#x27;b00</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">module</span> xxx (</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    ......</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        `S0: <span class="keyword">begin</span>:</span><br><span class="line">            <span class="comment">//状态转移代码</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//消除锁存器</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在写一些简单的<code>Verilog</code>有限状态机的时候觉得结构简单清晰易懂，怎么写这么舒服，感觉脑子都闲置了下来（bushi，但是遇到像<code>cpu_checker_challenge</code>那样状态多且转移方程复杂的题目，就会显得单一过程块冗长且十分不易<code>debug</code>，几百行代码挤在一个<code>always</code>块中，总感觉像写C语言只写一个<code>main</code>函数</li>
</ul>
</li>
</ul>
<hr>
<h3 id="重构Verilog结构"><a href="#重构Verilog结构" class="headerlink" title="重构Verilog结构"></a>重构<code>Verilog</code>结构</h3><ul>
<li>直到我遇见了<code>HDLbits</code>，它向我提供了一种使用<code>Verilog</code>搭建和<code>logisim</code>结构很相似的有限状态机的代码机构，感觉会比一个<code>always</code>块清晰一些？</li>
<li>首先，解决最大的问题，把<code>always</code>块拆分出来，像<code>logisim</code>一样，我们将代码分出计算次态的状态转移逻辑使用纯组合电路代替  <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">reg</span>[<span class="number">1</span>: <span class="number">0</span>] state, next_state;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时钟沿上升，状态转移</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">        state &lt;= <span class="number">2&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        state &lt;= next_state;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算次态next_state</span></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span>(state)</span><br><span class="line">        `S0: <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出逻辑方案1</span></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    out = ......</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出逻辑方案2</span></span><br><span class="line"><span class="keyword">assign</span> out = ......</span><br></pre></td></tr></table></figure>
<ul>
<li>诶呀，瞬间感觉代码变得清爽了，结构更加清晰了有没有（<del>没有也不许说</del>）</li>
</ul>
</li>
<li>也许此时你觉得这样不过只是拆了几个<code>always</code>出来，没什么技术含量，那么接下来我们还可以利用新的结构做出一些原本结构做不出来的优化–<strong>简化代码逻辑</strong>与<strong>消除锁存器plus</strong><ul>
<li>你是否常常遇到这种情况，某个变量多个状态下的变化是一致的，只有极少部分的值改变的不一致<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span>(status)</span><br><span class="line">        `S0: <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (in == a) <span class="keyword">begin</span></span><br><span class="line">                count &lt;= <span class="number">1</span>;</span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == b) <span class="keyword">begin</span></span><br><span class="line">                count &lt;= <span class="number">0</span>;</span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == c) <span class="keyword">begin</span></span><br><span class="line">                count &lt;= <span class="number">0</span>;</span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == d) <span class="keyword">begin</span></span><br><span class="line">                count &lt;= <span class="number">0</span>;</span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                count &lt;= <span class="number">0</span>;</span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
上面只展示一个状态下<code>count</code>变量的转移，如果你有10个状态呢（<del>你真的敢像<code>logisim</code>一样CV吗</del>），但是如果我们使用新结构就可以在<code>always</code>块开始时默认赋值了，节省代码<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    count &lt;= next_count;</span><br><span class="line">    status &lt;= next_status;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//默认赋值区域</span></span><br><span class="line">    next_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span>(status)</span><br><span class="line">        `S0: <span class="keyword">begin</span>:</span><br><span class="line">            <span class="keyword">if</span> (in == a) <span class="keyword">begin</span></span><br><span class="line">                next_count = <span class="number">1</span>;   </span><br><span class="line">            .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == b) <span class="keyword">begin</span></span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == c) <span class="keyword">begin</span></span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> (in == d) <span class="keyword">begin</span></span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                .......</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
这得益于我们使用组合逻辑的always块不是非阻塞赋值，可以多次赋值，所以不用像之前一样每个情况都要重复</li>
<li>同样，通过预先赋初值的办法我们就可以彻底消除锁存器这个bug了，因为锁存器产生原因就是我们没有明确赋值导致<code>Verilog</code>推导出锁存器记录之前的状态（<code>Verilog</code>帮我们默认赋值）<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (in == a) <span class="keyword">begin</span></span><br><span class="line">        count &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="comment">//缺少else分支</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span>@(*) <span class="keyword">begin</span></span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (in == a) <span class="keyword">begin</span></span><br><span class="line">        count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
新结构的代码没有锁存器问题，但是<font color = red>不要故意不写else，重申，我们只是抑制锁存器plus</font></li>
</ul>
</li>
</ul>
<hr>
<h2 id="P1-Q5-表达式状态机"><a href="#P1-Q5-表达式状态机" class="headerlink" title="P1.Q5 表达式状态机"></a>P1.Q5 表达式状态机</h2><ul>
<li>大抵是一道很显然的<code>Moore</code>状态机，只需要判断<code>需要运算符</code>和<code>需要数字</code>两种状态即可，大致的思路如下<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/P1_Q5.png" alt="状态转移图"></li>
<li>等等，这里的<code>*</code>和正则里面的不是一个啊，这里的是<code>\*</code>，笔者忘改了</li>
<li>写起来也是顺手啊</li>
<li>提供一个进阶题(<a href="/2024/09/30/CO_P1_extra/" title="北航计算机组成P1推荐题汇总">北航计算机组成P1推荐题汇总</a>)，移步1202-145，加入匹配括号，甚至是多重嵌套括号，思路其实是一致的</li>
</ul>
<hr>
<h2 id="P1-extra-BlockChecker"><a href="#P1-extra-BlockChecker" class="headerlink" title="P1.extra BlockChecker"></a>P1.extra BlockChecker</h2><ul>
<li>一道好题，<del>但不至于卡我一天吧</del>(<code>&amp;&amp;</code>别再写成<code>||</code>了</li>
<li>因为我第一个思路因为某些莫名的原因一直没过(手真贱，所以我就换了一个思路，那么我提供两个思路思考</li>
</ul>
<h3 id="思路一-多个寄存器"><a href="#思路一-多个寄存器" class="headerlink" title="思路一 多个寄存器"></a>思路一 多个寄存器</h3><ul>
<li><p><del>好处是状态少，坏处是容易手误</del></p>
</li>
<li><p>状态设置思路</p>
<ul>
<li>首先设置了四个状态<code>start</code>、<code>word</code>、<code>illegal</code>分别表示空闲状态、匹配单词状态、匹配已经非法状态</li>
</ul>
</li>
<li><p>寄存器变量设置思路</p>
<table>
<thead>
<tr>
<th align="center">寄存器变量</th>
<th align="center">位宽</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">num</td>
<td align="center">32</td>
<td align="center">保存读入的单词长度(unsigned)</td>
</tr>
<tr>
<td align="center">flag</td>
<td align="center">33</td>
<td align="center">保存目前未匹配的begin数量(signed)</td>
</tr>
<tr>
<td align="center">has_begin</td>
<td align="center">1</td>
<td align="center">前一个周期是否已经匹配begin成功</td>
</tr>
<tr>
<td align="center">has_end</td>
<td align="center">1</td>
<td align="center">前一个周期是否已经匹配end成功</td>
</tr>
<tr>
<td align="center">first</td>
<td align="center">8</td>
<td align="center">最近五个周期内第1个周期的字符</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">8</td>
<td align="center">最近五个周期内第i个周期的字符</td>
</tr>
<tr>
<td align="center">fifth</td>
<td align="center">8</td>
<td align="center">这个周期读入的in，即最近五个周期内第5个周期的字符</td>
</tr>
</tbody></table>
</li>
<li><p>状态转移思路</p>
<ul>
<li><code>start</code>状态<ul>
<li><code>reset</code>生效后回到<code>start</code>状态</li>
<li>匹配到字母则<code>num</code>自增，且进入状态<code>word</code></li>
<li>匹配到空格保持原状态</li>
<li>若匹配到其他的进入<code>illegal</code>状态</li>
</ul>
</li>
<li><code>word</code>状态<ul>
<li>读入字母，<code>num</code>自增，如果在包括此次<code>in</code>输入共有五个字符时，且<code>first</code> ~ <code>fifth(in)</code>是<code>begin</code>(不区分大小写)，<code>flag</code>加1，设置<code>has_begin</code></li>
<li>同上，在包含此次<code>in</code>共三个字符时，且<code>third</code> ~ <code>fifth(in)</code>是<code>end</code>(不区分大小写)，<code>flag</code>减1，设置<code>has_end</code></li>
<li>读入字母，<code>has_begin</code>已经置高，说明前面五个字符已经是<code>begin</code>了，但是又读入一个字母，说明这个单词不是<code>begin</code>了，<code>flag</code>减1</li>
<li>同上，<code>has_end</code>已经置高了，说明这个单词不是<code>end</code>，<code>flag</code>需要加1</li>
<li>读入空格，说明单词已经读入完毕，<code>num</code>置0，如果<code>flag</code>此时是-1(<code>0x1ffffffff</code>)，说明先出现了未匹配的<code>end</code>，此时进入<code>illegal</code>状态，等待复位信号否则回到<code>start</code>空闲状态</li>
<li>读入其他字符进入<code>illegal</code>状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="思路二-多个状态"><a href="#思路二-多个状态" class="headerlink" title="思路二 多个状态"></a>思路二 多个状态</h3><ul>
<li><del>好处是清晰，没有坏处</del></li>
<li>状态设置思路<table>
<thead>
<tr>
<th align="center">状态</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">_start</td>
<td align="center">空闲状态等待空格或者字母</td>
</tr>
<tr>
<td align="center">_b</td>
<td align="center">匹配到单词b</td>
</tr>
<tr>
<td align="center">_be</td>
<td align="center">匹配到单词be</td>
</tr>
<tr>
<td align="center">_beg</td>
<td align="center">匹配到单词beg</td>
</tr>
<tr>
<td align="center">_begi</td>
<td align="center">匹配到单词begi</td>
</tr>
<tr>
<td align="center">_begin</td>
<td align="center">匹配到单词begin</td>
</tr>
<tr>
<td align="center">_e</td>
<td align="center">匹配到单词e</td>
</tr>
<tr>
<td align="center">_en</td>
<td align="center">匹配到单词en</td>
</tr>
<tr>
<td align="center">_end</td>
<td align="center">匹配到单词end</td>
</tr>
<tr>
<td align="center">_other</td>
<td align="center">匹配到其他单词</td>
</tr>
</tbody></table>
</li>
<li>寄存器设置思路<ul>
<li>只需要<code>state</code>寄存器保存状态和<code>flag</code>寄存器保存左括号数</li>
</ul>
</li>
<li>状态转移思路<ul>
<li><code>_start</code>状态<ul>
<li>复位后回到<code>_start</code>状态等待输入</li>
<li>如果是字母<code>b</code>进入<code>_b</code>状态</li>
<li>如果是字母<code>e</code>进入<code>_e</code>状态</li>
<li>如果是其他字母进入<code>_other</code>状态</li>
<li>空格保持状态</li>
</ul>
</li>
<li><code>_b</code> ~ <code>_en</code>状态<ul>
<li>每个都是匹配到某个字母转为下一个状态：<code>_b</code>匹配到字母<code>e</code>转到<code>_be</code></li>
<li>匹配到其他字母直接转为<code>_other</code></li>
<li>匹配到空格回到空闲状态</li>
</ul>
</li>
<li><code>_begin</code>与<code>_end</code><ul>
<li>两个状态特殊在于判断其后是否还有字母，也即到底是完整单词还是其他单词的前缀例如<code>endx</code></li>
<li>因为前一个状态转移时时默认匹配到了完整单词，例如<code>_begi</code>到<code>_begin</code>是匹配到了<code>begin</code>一个周期的，所以如果后面有其他字母需要调整<code>flag</code>的值</li>
</ul>
</li>
<li><code>_other</code><ul>
<li>接收到字母保持原态</li>
<li>接收到空格回到空闲状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="P1推荐题汇总"><a href="#P1推荐题汇总" class="headerlink" title="P1推荐题汇总"></a>P1推荐题汇总</h2><a class="btn-beautify " href="https://kie-chi.github.io/2024/09/30/CO_P1_extra/" 
  title="P1推荐题汇总"><span>P1推荐题汇总</span></a>
<p><a href="https://kie-chi.github.io/2024/09/30/CO_P1_extra/">P1推荐题汇总</a></p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
        <category>课下复习</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础--字符串(一)</title>
    <url>/2024/09/21/Python_%E5%AD%97%E7%AC%A6%E4%B8%B2_1/</url>
    <content><![CDATA[<h1 id="Python基础之字符串-一"><a href="#Python基础之字符串-一" class="headerlink" title="Python基础之字符串(一)"></a>Python基础之字符串(一)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><font face="宋体">
&nbsp;&nbsp;随着计算机发展日益加快，就算对于非计算机专业人士也通过键盘、鼠标等IO组件与计算机进行沟通。我们手指的每一次敲击，都传送给计算机输入某个“字符”的信号，字符与字符串不仅是编程语言的基本组成元素，更是我们与计算机交流的桥梁
<br>
&nbsp;&nbsp;对于<mark class="hl-label blue">Python</mark> 这门现代编程语言，字符串的操作也是重中之重，接下来让我们一起学习有关字符串的内容吧
</font>

<h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h2><h3 id="字符串的创建"><a href="#字符串的创建" class="headerlink" title="字符串的创建"></a>字符串的创建</h3><ul>
<li>对于较早的C语言等，字符一般而言指<code>acsii</code>规定的128个字符，包括英文字母、数字、一些控制字符，而由这些字符组成的一串字符被形象地称作字符串<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;abcde&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li>而<code>Python3</code>采用了号称万国码的<code>Unicode</code>字符集，可以表示包括中文、阿拉伯文等多国文字在内的若干字符，当然通过<code>Python</code>内置的编码、解码函数可以实现<code>utf-8</code>、<code>ascii</code>等其他编码方式之间的互相转换，当然这是后话了<br><strong>这里放一个编码的链接</strong></li>
<li>在<code>Python</code>中没有字符和字符串的明显区别，字符串可以使用<code>&#39;</code>或者<code>&quot;</code>定义，甚至对于多行字符串，可以使用<code>&quot;&quot;&quot;</code>或者<code>&#39;&#39;&#39;</code>来包含多行文本而不用在字符串间换行位置使用换行符<code>\n</code>，甚至允许使用<code>\</code>来拼接多行字符串为一行<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python中没有字符和字符串的区分</span></span><br><span class="line">char_one = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">char_two = <span class="string">&quot;a&quot;</span></span><br><span class="line">chars = <span class="string">&#x27;abcde&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(char_one)</span><br><span class="line"><span class="built_in">print</span>(char_two)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line">lines = <span class="string">&quot;&quot;&quot;this is a long string</span></span><br><span class="line"><span class="string">that spans multiple lines&quot;&quot;&quot;</span></span><br><span class="line">lines_single = <span class="string">&#x27;&#x27;&#x27;this is also a long </span></span><br><span class="line"><span class="string">string</span></span><br><span class="line"><span class="string">that spans mutiple lines too&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(lines)</span><br><span class="line"><span class="built_in">print</span>(lines_single)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接多行字符</span></span><br><span class="line">new_lines = <span class="string">&quot;this is a long string&quot;</span>\</span><br><span class="line">            <span class="string">&quot;that over&quot;</span>\</span><br><span class="line">            <span class="string">&quot;multiple lines&quot;</span></span><br><span class="line"><span class="built_in">print</span>(new_lines)</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">输出内容</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a</span><br><span class="line">a</span><br><span class="line">this is a long string</span><br><span class="line">that spans multiple lines</span><br><span class="line">this is also a long string</span><br><span class="line">that spans multiple lines</span><br><span class="line">this is a long string that over multiple lines</span><br></pre></td></tr></table></figure>
</div></details></li>
</ul>
<hr>
<h3 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h3><ul>
<li>在<code>Python</code>中所有数据都是通过引用传递与使用的，这意味着我们一般只管理指向数据的引用（<del>大概是Python不用写数据类型的原因之一</del>），传递数据一般也只是传递数据的引用而非数据本身(除深浅拷贝外) <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单数据类型</span></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = a <span class="comment"># b接收的是a的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂数据类型</span></span><br><span class="line">str_a = <span class="string">&quot;1234&quot;</span></span><br><span class="line">str_b = str_a <span class="comment"># 同理接收的是引用 </span></span><br></pre></td></tr></table></figure></li>
<li>这时，小熊饼干突然想修改<code>str_b</code>的值便加入了一系列指令<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改前地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改前值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br><span class="line"></span><br><span class="line">str_b += <span class="string">&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改后地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(str_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;展示修改后值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str_a)</span><br><span class="line"><span class="built_in">print</span>(str_b)</span><br></pre></td></tr></table></figure>
<details class="toggle" ><summary class="toggle-button" style="">运行结果</summary><div class="toggle-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">展示修改前地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">展示修改前值:</span><br><span class="line">1234</span><br><span class="line">1234</span><br><span class="line">展示修改后地址:</span><br><span class="line">140123456789056</span><br><span class="line">342453543545131</span><br><span class="line">1234</span><br><span class="line">12345</span><br></pre></td></tr></table></figure></div></details>
我们惊奇地发现<code>str_b</code>指向的地址在修改前后发生了变化，这是因为字符串是一种<mark class="hl-label red">不可变类型</mark> ，任何针对字符串<strong>内容</strong>的改变都是不被允许的，所以我们进行修改<code>str_b</code>的操作<code>str_b += &quot;5&quot;</code>时，<code>Python</code>直接创建了一个新的变量<code>&quot;12345&quot;</code>然后将这个变量的地址赋给<code>str_b</code><details class="toggle" ><summary class="toggle-button" style="">什么是可变类型呢</summary><div class="toggle-content"><p>对于<code>str</code>、<code>tuple</code>、<code>byte</code>等<strong>不可变类型</strong>数据，一旦创立就无法修改其内容，而对于<code>list</code>、<code>dict</code>等<strong>可变类型</strong>我们允许在创立后继续修改其内容，如下</p>
<ul>
<li>甲方要求小熊饼干写一个复制一份<code>list</code>的Python文件，于是他写下如下代码<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_b = list_a</span><br></pre></td></tr></table></figure>
就在他写完时，甲方要求他在复制的副本中加入其他几个元素，睡眼朦胧的小熊饼干草草地写完了代码，没想到第二天代码出了问题，原始数据<code>list</code>遭到篡改，小熊饼干因此下岗了，呜呜呜<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改前地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改前值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_a)</span><br><span class="line"><span class="built_in">print</span>(list_b)</span><br><span class="line"></span><br><span class="line">list_b.append(<span class="number">5</span>)</span><br><span class="line">list_b.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改后地址:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list_b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打印修改后值:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_a)</span><br><span class="line"><span class="built_in">print</span>(list_b)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">打印修改前地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">打印修改前值:</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">打印修改后地址:</span><br><span class="line">140123456789056</span><br><span class="line">140123456789056</span><br><span class="line">打印修改后值:</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>
<font color = red>$Attention:$</font>小熊饼干通过赋值手段使<code>list_a</code>和<code>list_b</code>指向同一对象，又因为<code>list</code>类型是<strong>可变类型</strong>，所以对于其内容的修改是被允许的，这时我们可以通过<code>list_a</code>或者<code>list_b</code>中的某一个引用修改原对象内容，也就导致指向该对象的所有引用的“值”同时变化</li>
</ul>
</div></details></li>
</ul>
<hr>
<h3 id="字符串的简单操作"><a href="#字符串的简单操作" class="headerlink" title="字符串的简单操作"></a>字符串的简单操作</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>如果你曾经学习过C语言，一定记得字符串(字符数组)使用下标索引的场景（<del>熟悉而美好</del>，那么当然，<code>Python</code>提供了更为强大的索引功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">char = chars[<span class="number">0</span>] <span class="comment"># a</span></span><br><span class="line">char = chars[<span class="number">4</span>] <span class="comment"># d</span></span><br><span class="line">char = chars[-<span class="number">1</span>] <span class="comment"># g</span></span><br><span class="line">char = chars[-<span class="number">2</span>] <span class="comment"># f</span></span><br></pre></td></tr></table></figure>
<p>不仅提供了正向索引还有反向的，以后获得尾部的某些字符就轻松多了</p>
<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>Python中提供的一种相较于一般索引更加高级的索引方式，可以灵活地处理字符串一般格式为<code>str[start:end:step]</code></p>
<ul>
<li><code>start</code>：切片的起始索引值，缺省为字符串开头</li>
<li><code>end</code>：切片的结束索引值（不包括），缺省为字符串结束后（即包括字符串最后一个字符）</li>
<li><code>step</code>：切片的步长，默认为1  <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正向索引</span></span><br><span class="line">test_str = <span class="string">&quot;人生苦短,我用Python&quot;</span></span><br><span class="line">chars = test_str[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># &quot;生苦&quot;</span></span><br><span class="line">chars = test_str[:<span class="number">6</span>] <span class="comment"># &quot;人生苦短,我&quot;</span></span><br><span class="line">chars = test_str[<span class="number">6</span>:] <span class="comment"># &quot;用Python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整段切片</span></span><br><span class="line">chars = test_str[:] <span class="comment"># &quot;人生苦短,我用Python&quot;</span></span><br><span class="line">chars = test_str[::<span class="number">2</span>] <span class="comment"># &quot;人苦，用yhn&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒排索引(雾</span></span><br><span class="line">chars = test_str[::-<span class="number">1</span>] <span class="comment"># &quot;nohtyP用我,短苦生人&quot;</span></span><br><span class="line">chars = test_str[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">1</span>] <span class="comment"># &quot;我,短苦&quot;</span></span><br><span class="line">chars = test_str[:-<span class="number">7</span>:-<span class="number">1</span>] <span class="comment"># ”nohtyP“</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="str类"><a href="#str类" class="headerlink" title="str类"></a>str类</h2><p>相信学习过任何一门具有面向对象特性的编程语言的同学对这个词都不会陌生，简而言之，在面向对象设计中，万物都为“对象”；具有相同属性和行为的一群对象分为一个“类”，这个类抽象出对象群体共同的特性（属性）和行为（方法）</p>
<ul>
<li>在这里，各种不同的字符串都是对象，他们共同构成了类<code>str</code>，因为他们有某些共同的特性，如编码方式，有可以对所有字符串对象使用的方法，如查找子串，请你跟随小熊饼干，一起学习blog中讲解的第一个类<code>str</code></li>
<li>因为某些原因，我们将构造方法和一些魔术方法放在后续内容中介绍，敬请关注</li>
</ul>
<h3 id="内置方法（普通）"><a href="#内置方法（普通）" class="headerlink" title="内置方法（普通）"></a>内置方法（普通）</h3><h4 id="去除字符-熟练掌握"><a href="#去除字符-熟练掌握" class="headerlink" title="去除字符(熟练掌握)"></a>去除字符(熟练掌握)</h4><ul>
<li><code>str.strip(sub_string)</code><ul>
<li>从字符串左右去除所给字符串中的所有字符，缺省为空去除空白字符</li>
</ul>
</li>
<li><code>str.rstrip(sub_string)</code><ul>
<li>从字符串右去除所给字符串中的所有字符，缺省为空去除空白字符</li>
</ul>
</li>
<li><code>str.lstrip(sub_string)</code><ul>
<li>从字符串左去除所给字符串中的所有字符，缺省为空去除空白字符</li>
</ul>
</li>
<li>都只会去除连续匹配的字符，若有不匹配，则立即停止<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;  hello  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())  </span><br><span class="line"><span class="built_in">print</span>(s.strip(<span class="string">&quot; h&quot;</span>))  </span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;  hello  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.lstrip()) </span><br><span class="line"><span class="built_in">print</span>(s.lstrip(<span class="string">&quot; h&quot;</span>)) </span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;  hello  &quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.rstrip()) </span><br><span class="line"><span class="built_in">print</span>(s.rstrip(<span class="string">&quot; o&quot;</span>))  </span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;abc123cba&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.strip(<span class="string">&quot;abc&quot;</span>))</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看输出内容
    </button><div class="hide-content"><p>空格使用下滑线表示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">ello</span><br><span class="line">hello____</span><br><span class="line">ello___</span><br><span class="line">___hello</span><br><span class="line">___hell</span><br><span class="line">123   </span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
<hr>
<h4 id="查找与计数-熟练掌握"><a href="#查找与计数-熟练掌握" class="headerlink" title="查找与计数(熟练掌握)"></a>查找与计数(熟练掌握)</h4><ul>
<li><code>str.find(sub_string)</code><ul>
<li>从字符串<strong>左端</strong>开始查找，返回第一个匹配子串的索引值，没有<strong>返回-1</strong></li>
</ul>
</li>
<li><code>str.rfind(sub_string)</code><ul>
<li>从字符串<strong>右端</strong>开始查找，返回第一个匹配子串的索引值，没有<strong>返回-1</strong></li>
</ul>
</li>
<li><code>str.index(sub_string)</code><ul>
<li>从字符串<strong>左端</strong>开始查找，返回第一个匹配子串的索引值，没有<strong>抛出异常</strong></li>
</ul>
</li>
<li><code>str.rindex(sub_string)</code><ul>
<li>从字符串<strong>右端</strong>开始查找，返回第一个匹配子串的索引值，没有<strong>抛出异常</strong></li>
</ul>
</li>
<li><code>str.count(sub_string, [start, end])</code><ul>
<li><code>[]</code>在函数注解中代表可有可无的参数</li>
<li>计算子串在这个字符串中出现的次数，可指定计数区间</li>
</ul>
</li>
<li><code>in &amp;&amp; not in</code><ul>
<li>对于字符串这种可迭代对象可以使用<code>Python</code>内置的操作符判断一个元素是否在这个对象中<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;hello, Python! I love Python ! We all use Python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(chars.find(<span class="string">&quot;Python&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.rfind(<span class="string">&quot;Python&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.index(<span class="string">&quot;Python&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.index(<span class="string">&quot;Python&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.count(<span class="string">&quot;Python&quot;</span>, <span class="number">0</span>, <span class="built_in">len</span>(chars)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python&quot;</span> <span class="keyword">in</span> chars)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Chi&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> chars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chars.index(<span class="string">&quot;Chi&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.find(<span class="string">&quot;Chi&quot;</span>))</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看输出内容
    </button><div class="hide-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">42</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:\Pycharm_code\math_and_\test.py&quot;</span>, line 8, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(chars.index(<span class="string">&quot;Chi&quot;</span>))</span><br><span class="line">ValueError: substring not found</span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
</li>
</ul>
<hr>
<h4 id="实用-熟练掌握"><a href="#实用-熟练掌握" class="headerlink" title="实用(熟练掌握)"></a>实用(熟练掌握)</h4><ul>
<li><code>str.replace(string1, string2)</code><ul>
<li>将字符串中的全部<code>string1</code>都替换为<code>string2</code></li>
</ul>
</li>
<li><code>str.split(base, [count])</code><ul>
<li>将字符串按照<code>base</code>为基准分为不同的字符串，分割的次数可以显式地给出，优先从左到右，返回一个字符串列表</li>
</ul>
</li>
<li><code>str.join(itereable)</code><ul>
<li>将可迭代对象(可以先理解为数组、元组这些有基本元素的类型，字符串也是了)，将其中的元素直接使用<code>str</code>连接拼接为一个更长的字符串<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;Python and language C&quot;</span></span><br><span class="line"><span class="built_in">print</span>(chars.replace(<span class="string">&quot;language C&quot;</span>, <span class="string">&quot;Python&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chars.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>.join(chars))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&amp;&quot;</span>.join(chars.split(<span class="string">&quot; &quot;</span>)))</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看输出内容
    </button><div class="hide-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Python and Python</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;language&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;language C&#x27;</span>]</span><br><span class="line">P*y*t*h*o*n* *a*n*d* *l*a*n*g*u*a*g*e* *C</span><br><span class="line">Python&amp;and&amp;language&amp;C</span><br></pre></td></tr></table></figure>
</div></div>
<div class="note info simple"><p>字符串不可修改，所以如果需要对字符串进行操作记得用变量接收哦</p>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = chars.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">new_chars = chars.split(<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<hr>
<h4 id="大小写转换-了解即可"><a href="#大小写转换-了解即可" class="headerlink" title="大小写转换(了解即可)"></a>大小写转换(了解即可)</h4><ul>
<li><code>str.upper()</code><ul>
<li>将字符串内所有字符转为大写</li>
</ul>
</li>
<li><code>str.lower()</code><ul>
<li>将字符串内所有字符转为小写</li>
</ul>
</li>
<li><code>str.capitalize()</code><ul>
<li>将字符串首字母大写</li>
</ul>
</li>
<li><code>str.title()</code><ul>
<li>将字符串每个单词首字母大写<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&quot;hello, world&quot;</span></span><br><span class="line">chars_upper = chars.upper()</span><br><span class="line">chars_lower = chars.lower()</span><br><span class="line">chars_cap = chars.capitalize()</span><br><span class="line">chars_title = chars.title()</span><br><span class="line"><span class="built_in">print</span>(chars_upper)</span><br><span class="line"><span class="built_in">print</span>(chars_lower)</span><br><span class="line"><span class="built_in">print</span>(chars_cap)</span><br><span class="line"><span class="built_in">print</span>(chars_title)</span><br></pre></td></tr></table></figure>
<div class="hide-block"><button type="button" class="hide-button" style="">查看输出内容
    </button><div class="hide-content"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HELLO, WORLD</span><br><span class="line">hello, world</span><br><span class="line">Hello, world</span><br><span class="line">Hello, World</span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
</li>
</ul>
<hr>
<h4 id="特判-了解即可"><a href="#特判-了解即可" class="headerlink" title="特判(了解即可)"></a>特判(了解即可)</h4><ul>
<li>不咋用，因为我都有正则了还要什么自行车？</li>
<li><code>str.isalpha()</code><ul>
<li>是否全是英文字母</li>
</ul>
</li>
<li><code>str.isspace()</code><ul>
<li>是否全为空白符</li>
</ul>
</li>
<li><code>str.isupper()</code><ul>
<li>是否全为大写字母</li>
</ul>
</li>
<li><code>str.islower()</code><ul>
<li>是否全为小写字母</li>
</ul>
</li>
<li><code>str.istitle()</code><ul>
<li>是否是标题格式，单词第一个大写</li>
</ul>
</li>
<li><code>str.isdecimal()</code><ul>
<li>是否是十进制阿拉伯数字，不包含其他任何形式的数字</li>
</ul>
</li>
<li><code>str.isdigit()</code><ul>
<li>比上面更广，可以包含上标数字、罗马数字、全角数字</li>
</ul>
</li>
<li><code>str.isnumeric()</code><ul>
<li>比上面更广，甚至可以识别中文数字和分数数字</li>
</ul>
</li>
<li><code>str.isalnum()</code><ul>
<li>是否全为字母和数字</li>
<li>字母不限于英文字母，还有各国语言字母</li>
<li>数字不识别分数</li>
</ul>
</li>
<li><code>str.startswith()</code><ul>
<li>以什么指定字符串开头</li>
</ul>
</li>
<li><code>str.endswith()</code><ul>
<li>以什么指定字符串结尾</li>
</ul>
</li>
</ul>
<hr>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul>
<li>如果你希望想C语言一样通过码点的位置定位一个字符的话，就继续看吧<ul>
<li>例如<code>A</code>字符在ascii表中对于着65，所以<code>A</code>也可以写为<code>&#39;\x65&#39;</code><div class="hide-block"><button type="button" class="hide-button" style="">查看示例
    </button><div class="hide-content"><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&#x27;\x65&#x27;</span></span><br><span class="line">byte_string = char.encode(<span class="string">&#x27;latin1&#x27;</span>) <span class="comment"># 将chars理解为Byte串</span></span><br><span class="line">char = byte_string.decode() <span class="comment"># 进行utf-8解码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chars)</span><br><span class="line"><span class="built_in">print</span>(byte_string)</span><br><span class="line"><span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">b<span class="string">&#x27;A&#x27;</span></span><br><span class="line">A</span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
</li>
<li>同理，对于unicode字符集（涵盖ascii）中的字符也可以进行转义，不过不能直接使用类似于上面的格式<ul>
<li>例如<code>中</code>字符在<code>utf-8</code>编码方式中的三个字节标识是<code>&#39;\xe4\xb8\xad&#39;</code>，就不可以直接打印转义字符串，Python会理解为三个在ascii码表中的字符<div class="hide-block"><button type="button" class="hide-button" style="">查看示例
    </button><div class="hide-content"><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">chars = <span class="string">&#x27;\xe4\xb8\xad&#x27;</span></span><br><span class="line">byte_string = chars.encode(<span class="string">&#x27;latin1&#x27;</span>) <span class="comment"># 将chars编码理解为Byte串</span></span><br><span class="line">char = byte_string.decode() <span class="comment"># 默认以utf-8来解码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chars)</span><br><span class="line"><span class="built_in">print</span>(byte_string)</span><br><span class="line"><span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ä¸­-</span><br><span class="line">b<span class="string">&#x27;\xe4\xb8\xad&#x27;</span></span><br><span class="line">中</span><br></pre></td></tr></table></figure>
</div></div></li>
</ul>
</li>
<li>最后，Python内置了提供字符码点的函数（<strong>非ascii码字符的码点</strong>与<strong>utf-8编码的标识</strong>是两个概念）</li>
<li><code>ord()</code><ul>
<li>由字符得到码点</li>
</ul>
</li>
<li><code>chr()</code><ul>
<li>由码点生成字符</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>北航计算机组成P1推荐题汇总</title>
    <url>/2024/09/30/CO_P1_extra/</url>
    <content><![CDATA[<h1 id="北航计算机组成P1推荐题目汇总"><a href="#北航计算机组成P1推荐题目汇总" class="headerlink" title="北航计算机组成P1推荐题目汇总"></a>北航计算机组成P1推荐题目汇总</h1><h2 id="题目怎么来的"><a href="#题目怎么来的" class="headerlink" title="题目怎么来的"></a>题目怎么来的</h2><ul>
<li><del>偷来的(搓手手</del></li>
<li>如果你看了一下推荐题目的<code>URL</code>的话，你会发现<code>cscore</code>简直是天生为<del>爬虫而生的</del>，甚至参数都已经写在<code>URL</code>里面了，这不是勾引是什么？<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://cscore.buaa.edu.cn/#/problem?ProblemId=334&amp;PieId=1202</span><br></pre></td></tr></table></figure></li>
<li><code>PieId</code><ul>
<li>似乎是每个P的编号，每年的都不一样，2306的<code>1202</code>代表推荐题目，其他的大都爬不到(悲</li>
</ul>
</li>
<li><code>ProblemId</code><ul>
<li>下辖的题目编号，额，毫无规律可言，建议遍历爬取</li>
<li>但是似乎每年相同模块（例如推荐题目）的相同题目编号都有题目（未经</li>
</ul>
</li>
<li>以及题目按照难度依次上升（笔者认为的，毫无参考价值（bushi ）<br><a href="https://github.com/Kie-Chi/cscore_crawl.git">源码获取</a></li>
</ul>
<hr>
<h2 id="组合电路"><a href="#组合电路" class="headerlink" title="组合电路"></a>组合电路</h2><ul>
<li>过于简单，仅有提示</li>
</ul>
<h3 id="1202-405-FloatType"><a href="#1202-405-FloatType" class="headerlink" title="1202-405 FloatType"></a>1202-405 FloatType</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> FloatType(</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">31</span>: <span class="number">0</span>] num,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">4</span>: <span class="number">0</span>] float_type</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义状态</span></span><br><span class="line">    <span class="keyword">parameter</span> zero = <span class="number">5&#x27;b1</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>: <span class="number">0</span>] exponent;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">22</span>: <span class="number">0</span>] fraction;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        exponent = num[<span class="number">30</span>: <span class="number">23</span>];</span><br><span class="line">        fraction = num[<span class="number">22</span>: <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算次态</span></span><br><span class="line">        <span class="keyword">if</span> (exponent == <span class="number">8&#x27;b0</span> &amp;&amp; fraction == <span class="number">23&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">            float_type = zero;</span><br><span class="line">        ....</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h3 id="1202-202-Comparator"><a href="#1202-202-Comparator" class="headerlink" title="1202-202 Comparator"></a>1202-202 Comparator</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">cin = <span class="number">1&#x27;b1</span>;</span><br><span class="line"></span><br><span class="line">cout = (A[<span class="number">0</span>] &amp; ~B[<span class="number">0</span>]) | (cin &amp; (A[<span class="number">0</span>] ^ ~B[<span class="number">0</span>]));</span><br><span class="line">cin = cout;                </span><br><span class="line"></span><br><span class="line">cout = (A[<span class="number">1</span>] &amp; ~B[<span class="number">1</span>]) | (cin &amp; (A[<span class="number">1</span>] ^ ~B[<span class="number">1</span>]));</span><br><span class="line">cin = cout;    </span><br><span class="line"></span><br><span class="line">cout = (A[<span class="number">2</span>] &amp; ~B[<span class="number">2</span>]) | (cin &amp; (A[<span class="number">2</span>] ^ ~B[<span class="number">2</span>]));</span><br><span class="line">cin = cout;    </span><br><span class="line"></span><br><span class="line">S = A[<span class="number">3</span>] ^ ~B[<span class="number">3</span>] ^ cin;</span><br><span class="line">cout = (A[<span class="number">3</span>] &amp; ~B[<span class="number">3</span>]) | (cin &amp; (A[<span class="number">3</span>] ^ ~B[<span class="number">3</span>]));</span><br><span class="line">cin = cout;    </span><br><span class="line"></span><br><span class="line">Out = S;</span><br></pre></td></tr></table></figure>
<ul>
<li>核心就是一个四位的行波全加器，为了实现减法电路</li>
</ul>
<h3 id="1202-424-Voter"><a href="#1202-424-Voter" class="headerlink" title="1202-424 Voter"></a>1202-424 Voter</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> VoterPlus(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">31</span>: <span class="number">0</span>] np,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">7</span>: <span class="number">0</span>] vip,</span><br><span class="line">    <span class="keyword">input</span> vvip,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">7</span>: <span class="number">0</span>] result</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">31</span>: <span class="number">0</span>] np_vote, next_np_vote;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>: <span class="number">0</span>] vip_vote, next_vip_vote;</span><br><span class="line">    <span class="keyword">reg</span> vvip_vote, next_vvip_vote;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>: <span class="number">0</span>] next_result;</span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//复位</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//状态转移</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//默认复位，注意题意要求</span></span><br><span class="line">        next_np_vote = np_vote | np;</span><br><span class="line">        next_vip_vote = vip_vote | vip;</span><br><span class="line">        next_vvip_vote = vvip_vote | vvip;</span><br><span class="line"></span><br><span class="line">        next_result = <span class="number">8&#x27;b0</span>;</span><br><span class="line">        <span class="comment">//计算次态，使用for循环</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1202-102-ALU"><a href="#1202-102-ALU" class="headerlink" title="1202-102 ALU"></a>1202-102 ALU</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> alu(</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">31</span>: <span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">31</span>: <span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">2</span>: <span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">31</span>: <span class="number">0</span>] C</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">32</span>: <span class="number">0</span>] ext_a, ext_b;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">32</span>: <span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">reg</span> cout;</span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span> (ALUOp)</span><br><span class="line">            sgtu: <span class="keyword">begin</span></span><br><span class="line">                ext_a = &#123;<span class="number">0</span>, A&#125;;</span><br><span class="line">                ext_b = &#123;<span class="number">0</span>, B&#125;;</span><br><span class="line">                ext_a = ~ext_a;</span><br><span class="line">                </span><br><span class="line">                sum = ext_a + ext_b + <span class="number">1</span>;</span><br><span class="line">                C = sum[<span class="number">32</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            sgt: <span class="keyword">begin</span></span><br><span class="line">                ext_a = &#123;A[<span class="number">31</span>], A&#125;;</span><br><span class="line">                ext_b = &#123;B[<span class="number">31</span>], B&#125;;</span><br><span class="line">                ext_a = ~ext_a;</span><br><span class="line">                sum = ext_a + ext_b + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                C = sum[<span class="number">32</span>];</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">                C = <span class="number">32&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意使用拓展位的减法电路实现比较即可</li>
</ul>
<hr>
<h2 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h2><h3 id="1202-334-Drink"><a href="#1202-334-Drink" class="headerlink" title="1202-334 Drink"></a>1202-334 Drink</h3><ul>
<li><del>为什么我航的售卖机没有一键退币功能，大一被坑了多少饮料</del></li>
<li>本题似乎是一个<code>Moore</code>型优先状态机的问题，但是我决定使用我的新结构，所以我们使用<code>Mealy</code>机＋<code>Register</code>的方式解决输出不与状态同步的问题</li>
<li>四个状态还是很好想的，<code>售货机没吞钱</code> <code>售货机吞0.5元</code> <code>售货机吞1元</code> <code>售货机吞1.5元</code>，然后就是状态转移方程了<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/p1_drink.png" alt="alt-text"></li>
<li>提供一个我使用的新结构框架（<del>应该没有泄露源码之嫌</del>）<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> drink(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">1</span>: <span class="number">0</span>] coin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> drink,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">1</span>: <span class="number">0</span>] back</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义状态</span></span><br><span class="line">    <span class="keyword">parameter</span> s0 = <span class="number">2&#x27;b0</span>;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义寄存器变量</span></span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">1</span>: <span class="number">0</span>] state, next_state; </span><br><span class="line">    <span class="keyword">reg</span> next_drink;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">1</span>: <span class="number">0</span>] next_back;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset) <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//复位</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="comment">//状态转移</span></span><br><span class="line">            state &lt;= next_state;</span><br><span class="line">            back &lt;= next_back;</span><br><span class="line">            drink &lt;= next_drink;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//默认赋值</span></span><br><span class="line">        next_back = <span class="number">2&#x27;b0</span>;</span><br><span class="line">        next_drink = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        next_state = state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> (state)</span><br><span class="line">            s0: <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//状态转移</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">begin</span></span><br><span class="line">                <span class="comment">//......</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1202-145-String"><a href="#1202-145-String" class="headerlink" title="1202-145 String"></a>1202-145 String</h3><ul>
<li>其实本质是课下题的升级版，对于左括号进行记录即可</li>
<li>多重括号的辨别使用一个变量寄存左括号数量即可<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/P1_string2.png" alt="状态转移图"></li>
</ul>
<h3 id="1202-336-IntCheck"><a href="#1202-336-IntCheck" class="headerlink" title="1202-336 IntCheck"></a>1202-336 IntCheck</h3><ul>
<li>第一，读到<code>;</code>语句才截止，所以要考虑每个状态遇到<code>;</code>的情况</li>
<li>第二，多个标识符可以复用状态，详情请看下面状态转移图</li>
<li>第三，不要在小情侣后面码代码<br><img src="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/P1_int.svg" alt="复杂图"><a class="btn-beautify " href="https://tsxb-top-pic.oss-cn-hangzhou.aliyuncs.com/chis/images/P1_int.svg" 
  title="查看原图"><span>查看原图</span></a></li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
        <category>推荐题目</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>the information is here</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.gender = gender</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;name:<span class="subst">&#123;name&#125;</span>,gender:<span class="subst">&#123;gender&#125;</span>,age:<span class="subst">&#123;age&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> deap <span class="keyword">import</span> base,tools,algorithms,creator</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># import random</span></span><br><span class="line"></span><br><span class="line">IND_NUM = <span class="number">30</span> <span class="comment"># 30位编码，[-5,5]，精度是8位</span></span><br><span class="line">POP_NUM = <span class="number">100</span> <span class="comment"># 种群总个体数量</span></span><br><span class="line">OFS_MAX = <span class="number">50</span> <span class="comment"># 后代最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">individual</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> individual]),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> (-<span class="number">5</span> + (<span class="number">10</span> * num)/(<span class="number">2</span>**<span class="number">30</span> - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval</span>(<span class="params">individual</span>):</span><br><span class="line">    x = decode(individual)</span><br><span class="line">    <span class="keyword">return</span> ((np.square(x) + x) * np.cos(<span class="number">2</span> * x) + np.square(x) + x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">creator.create(<span class="string">&quot;FitnessMin&quot;</span>,base.Fitness,weights=(-<span class="number">1.0</span>,))</span><br><span class="line">creator.create(<span class="string">&quot;Individual&quot;</span>,<span class="built_in">list</span>,fitness = creator.FitnessMin)</span><br><span class="line"></span><br><span class="line">toolbox = base.Toolbox()</span><br><span class="line">toolbox.register(<span class="string">&quot;attribute&quot;</span>,np.random.randint,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;individual&quot;</span>, tools.initRepeat, creator.Individual, toolbox.attribute, n=IND_NUM)</span><br><span class="line">toolbox.register(<span class="string">&quot;population&quot;</span>, tools.initRepeat, <span class="built_in">list</span>, toolbox.individual)</span><br><span class="line">pop = toolbox.population(n=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">toolbox.register(<span class="string">&quot;evaluate&quot;</span>, <span class="built_in">eval</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;select&quot;</span>, tools.selTournament, <span class="number">3</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;mate&quot;</span>, tools.cxUniform, indpb=<span class="number">0.5</span>)</span><br><span class="line">toolbox.register(<span class="string">&quot;mutate&quot;</span>, tools.mutFlipBit, indpb=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># tools.mutFlipBit()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stats = tools.Statistics(key=<span class="keyword">lambda</span> x: x.fitness.values)</span><br><span class="line">stats.register(<span class="string">&quot;avg&quot;</span>, np.mean)</span><br><span class="line">stats.register(<span class="string">&quot;std&quot;</span>, np.std)</span><br><span class="line">stats.register(<span class="string">&quot;min&quot;</span>, np.<span class="built_in">min</span>)</span><br><span class="line">stats.register(<span class="string">&quot;max&quot;</span>, np.<span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">resultPop, logbook = algorithms.eaSimple(pop, toolbox, cxpb=<span class="number">0.5</span>, mutpb=<span class="number">0.2</span>, ngen=POP_NUM, stats=stats, verbose=<span class="literal">False</span>)</span><br><span class="line">logbook.header = <span class="string">&#x27;gen&#x27;</span>,<span class="string">&#x27;nevals&#x27;</span>,<span class="string">&#x27;avg&#x27;</span>,<span class="string">&#x27;std&#x27;</span>,<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(logbook)    </span><br></pre></td></tr></table></figure>

<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  pie
    title Key elements in Product X
    &quot;Calcium&quot; : 42.96
    &quot;Potassium&quot; : 50.05
    &quot;Magnesium&quot; : 10.01
    &quot;Iron&quot; :  5
  </pre></div>


<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><ul>
<li>我有一个好点子<div class="tabs" id="test4-"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test4--1">第一个Tab</button><button type="button" class="tab " data-href="test4--2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4--3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content" id="test4--1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4--2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4--3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></li>
</ul>
<p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯繫作者獲得授權，非商業轉載請註明出處。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://jerryc.me/" title="JerryC" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="JerryC" />
              </div>
              <div class="flink-item-name">JerryC</div> 
              <div class="flink-item-desc" title="今日事,今日毕">今日事,今日毕</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Hexo" />
              </div>
              <div class="flink-item-name">Hexo</div> 
              <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>
            </a>
          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">
          <div class="flink-list-item">
            <a href="https://www.youtube.com/" title="Youtube" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />
              </div>
              <div class="flink-item-name">Youtube</div> 
              <div class="flink-item-desc" title="视频网站">视频网站</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://www.weibo.com/" title="Weibo" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Weibo" />
              </div>
              <div class="flink-item-name">Weibo</div> 
              <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>
            </a>
          </div>
          <div class="flink-list-item">
            <a href="https://twitter.com/" title="Twitter" target="_blank">
              <div class="flink-item-icon">
                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />
              </div>
              <div class="flink-item-name">Twitter</div> 
              <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>
            </a>
          </div></div></div>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python基础--字符串(二)</title>
    <url>/2024/09/26/Python_%E5%AD%97%E7%AC%A6%E4%B8%B2_2/</url>
    <content><![CDATA[<h1 id="Python基础–字符串-二"><a href="#Python基础–字符串-二" class="headerlink" title="Python基础–字符串(二)"></a>Python基础–字符串(二)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>请确保你已经有一定的<code>Python</code>基础且对字符串有一定了解哦，今天我们依旧来探索字符串的秘密，发车了(<del>是因为笔者太懒才没有一次性写完的</del>)，完全不了解的小伙伴们也不用慌，移步<a href="/2024/09/21/Python_%E5%AD%97%E7%AC%A6%E4%B8%B2_1/" title="Python基础--字符串(一)">Python基础--字符串(一)</a></p>
<h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><h3 id="传统式"><a href="#传统式" class="headerlink" title="%传统式"></a><code>%</code>传统式</h3><ul>
<li>你是否看过这些特殊的字符串<code>%s</code>，<code>%d</code>呢，相信写过C语言的同学们一定不陌生了，如果没见过也没关系，他们都是一类特殊的字符串，我们称之为格式化字符串，常用于格式化我们的输出，那么我们就从最传统的<code>%</code>式格式化字符串讲解吧</li>
</ul>
<h4 id="常用的格式化字符串"><a href="#常用的格式化字符串" class="headerlink" title="常用的格式化字符串"></a>常用的格式化字符串</h4><ul>
<li><code>%s</code><ul>
<li>适用于为字符串占位，<del>我本来就是啊</del></li>
</ul>
</li>
<li><code>%d</code><ul>
<li>适用于为十进制数字占位，类似的还有<code>%x</code> <code>%o</code> <code>%b</code></li>
</ul>
</li>
<li><code>%f</code><ul>
<li>适用于为浮点数占位</li>
</ul>
</li>
<li><code>.precision</code><ul>
<li>适用于对浮点数精度控制，<code>%.2f</code>保留两位小数，默认是6位小数</li>
</ul>
</li>
<li><code>width</code><ul>
<li>指定占位符占据的宽度，<code>%5d</code>十进制整数至少占5个单位，不够补充</li>
</ul>
</li>
<li><code>flags</code><ul>
<li>指定填充位与对齐，与<code>width</code>位共同控制对齐问题</li>
<li><code>0</code>，补充前导0</li>
<li><code>-</code>，左对齐，默认是右对齐，将覆盖前导0</li>
<li><code> </code>，方便正数与负数对齐</li>
<li><code>+</code>，数字补齐符号</li>
</ul>
</li>
<li>可以搭配使用，例如<code>%-5.2f</code>等等</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;% d %+d&quot;</span> % (<span class="number">1234</span>, <span class="number">1234</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;% d %+d&quot;</span> % (-<span class="number">1234</span>, -<span class="number">1234</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%4d,%4d,%6.2f&quot;</span> % (<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-4d,%-4d,%-6.2f&quot;</span> % (<span class="number">12</span>, <span class="number">34</span>, <span class="number">3.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%04d,%04d,%06.2f&quot;</span> % (<span class="number">12</span>, <span class="number">234</span>, <span class="number">3.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%0-4d,%0-4d,%0-6.2f&quot;</span> % (<span class="number">12</span>, <span class="number">234</span>, <span class="number">3.1</span>)) <span class="comment"># 产生覆盖行为</span></span><br></pre></td></tr></table></figure>

<pre><code> 1234 +1234
-1234 -1234
  12,  34,  3.10
12  ,34  ,3.10  
0012,0234,003.10
12  ,234 ,3.10  
</code></pre>
<h3 id="format"><a href="#format" class="headerlink" title="format"></a>format</h3><h4 id="默认格式化"><a href="#默认格式化" class="headerlink" title="默认格式化"></a>默认格式化</h4><ul>
<li>不再通过<code>%</code>的形式指定，而是默认形式填充，我们只需要负责哪些位置填充什么字符即可</li>
<li>大括号中默认格式填入我们指定的参数，默认顺序是依次填入<ul>
<li><code>&quot;&#123;&#125; &#123;&#125;&quot;.format(12, &quot;setdown&quot;)</code></li>
</ul>
</li>
<li>有需求可以在大括号中填入参数位置，可以多次使用，每个大括号都要填入位置<ul>
<li><code>&quot;&#123;0&#125; &#123;1&#125; &#123;1&#125; &#123;0&#125;&quot;.format(12, &quot;setdown&quot;)</code></li>
<li><code>&quot;&#123;0&#125; &#123;1&#125;&quot;.format(12, &quot;setdown&quot;)</code></li>
</ul>
</li>
<li>利用键值对传入参数，则括号中必须使用key值<ul>
<li><code>&quot;&#123;name&#125; &#123;age&#125;&quot;.format(name=&quot;setdown&quot;, age=12)</code></li>
<li><code>&quot;&#123;name&#125; &#123;age&#125; &#123;age&#125; &#123;name&#125;&quot;.format(name=&quot;setdown&quot;, age=12)</code></li>
</ul>
</li>
<li>利用键值对和位置进行复杂传参<ul>
<li><code>&quot;&#123;0[name]&#125; &#123;1[age]&#125; &#123;0[0]&#125; &#123;1[1]&#125;&quot;.format(&#123;&quot;name&quot;:&quot;setdown&quot;, &quot;age&quot;:12&#125;, [12, 34])</code></li>
</ul>
</li>
</ul>
<h4 id="format-spec"><a href="#format-spec" class="headerlink" title="format_spec"></a>format_spec</h4><ul>
<li>通过类似于<code>%</code>传统式格式化字符串规范要求</li>
<li><code>:[[fill] align][sign][0][width][.precision][type]</code></li>
<li><code>fill</code><ul>
<li>填充内容，对于指定宽度填充什么字符，需要显式指定对齐方式</li>
</ul>
</li>
<li><code>align</code><ul>
<li>对齐方式，<code>&lt;</code> <code>^</code> <code>&gt;</code>分别是强制左、居中、右对齐</li>
</ul>
</li>
<li><code>sign</code><ul>
<li>展示符号，<code>+</code>正负数都展示符号，<code> </code>负数展示符号正数留空对齐</li>
</ul>
</li>
<li><code>width</code><ul>
<li>最小宽度，默认为字符串长度</li>
</ul>
</li>
<li><code>precision</code><ul>
<li>控制小数的精度范围，默认是小数点后六位</li>
</ul>
</li>
<li><code>type</code><ul>
<li>常用类型有<code>d</code> <code>f</code> <code>s</code></li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:_&lt;4&#125; &#123;:0&gt;6&#125; &#123;:$^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:04&#125; &#123;:10&#125; &#123;:^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">12</span>, <span class="number">3</span>, <span class="number">34</span>))</span><br></pre></td></tr></table></figure>

<pre><code>1___ 000002 $$$$11$$$$
0012          3     34    
</code></pre>
<h2 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h2><ul>
<li>可以通过变量等方式直接转义进入字符串，经常使用，但是也可以使用<code>format_spec</code>来表达更加准确的字符串形式</li>
<li>简易使用方式为<code>f&quot;&#123;name&#125; is about &#123;value&#125;&quot;</code></li>
<li>使用占位的变量可以与<code>format_spec</code>嵌套使用更加灵活</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = <span class="string">&quot;this is a test string&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;line= &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以起调试的作用</span></span><br><span class="line">a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a=&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">width = <span class="number">14</span></span><br><span class="line">align = <span class="string">&quot;^&quot;</span></span><br><span class="line">value = <span class="number">123.34</span></span><br><span class="line">precision = <span class="number">5</span></span><br><span class="line">fill = <span class="string">&quot;_&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;value:&#123;fill&#125;</span><span class="subst">&#123;align&#125;</span><span class="subst">&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>f&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<pre><code>line= &#39;this is a test string&#39;
a=3
__123.34000___
</code></pre>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
</search>
